use prjcombine_re_xilinx_rdverify::{BelContext, SitePinDir, Verifier};
use prjcombine_ultrascale::bels;

pub fn verify_xp5iob(vrf: &mut Verifier, bel: &BelContext<'_>) {
    let idx = bels::XP5IOB
        .into_iter()
        .position(|x| bel.slot == x)
        .unwrap();
    let nidx = idx / 3;
    let iidx = idx % 3;
    let pins = [
        ("IOB2COMP_LSPEED_I0", SitePinDir::Out),
        ("IOB2COMP_LSPEED_I1", SitePinDir::Out),
        ("IOB2PHY_I0", SitePinDir::Out),
        ("IOB2PHY_I1", SitePinDir::Out),
        ("IOB2PHY_LP_I_0", SitePinDir::Out),
        ("IOB2PHY_LP_I_1", SitePinDir::Out),
        ("PHY2IOB_DYNAMIC_DCI_TS0", SitePinDir::In),
        ("PHY2IOB_DYNAMIC_DCI_TS1", SitePinDir::In),
        ("PHY2IOB_IBUF_DISABLE_1", SitePinDir::In),
        ("PHY2IOB_IBUF_DIS_OR_HS_RX_DIS_0", SitePinDir::In),
        ("PHY2IOB_KEEPER_EN0", SitePinDir::In),
        ("PHY2IOB_KEEPER_EN1", SitePinDir::In),
        ("PHY2IOB_LP_RX_DIS_OR_TERM_EN", SitePinDir::In),
        ("PHY2IOB_LP_TX_O_OR_PU_EN_0", SitePinDir::In),
        ("PHY2IOB_LP_TX_O_OR_PU_EN_1", SitePinDir::In),
        ("PHY2IOB_LP_TX_T_OR_PD_EN_0", SitePinDir::In),
        ("PHY2IOB_O0_0", SitePinDir::In),
        ("PHY2IOB_O0_1", SitePinDir::In),
        ("PHY2IOB_PD_EN_1", SitePinDir::In),
        ("PHY2IOB_T0", SitePinDir::In),
        ("PHY2IOB_T1", SitePinDir::In),
        ("VREF", SitePinDir::In),
    ];
    vrf.verify_bel(bel, "XP5IOB", &pins, &[]);
    for (pin, _) in pins {
        vrf.claim_net(&[bel.fwire(pin)]);
    }

    let obel_vref = vrf.find_bel_sibling(bel, bels::XP5IO_VREF[nidx]);
    vrf.claim_pip(bel.crd(), bel.wire("VREF"), obel_vref.wire("VREF2IOB_VREF"));

    let obel_x5phy_hs = vrf.find_bel_sibling(bel, bels::X5PHY_HS[nidx]);
    for i in 0..2 {
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("PHY2IOB_O0_{i}")),
            obel_x5phy_hs.wire(&format!("HRT_PHY2IOB_O0_{ii}", ii = iidx * 2 + i)),
        );
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("PHY2IOB_T{i}")),
            obel_x5phy_hs.wire(&format!("HRT_PHY2IOB_T{ii}", ii = iidx * 2 + i)),
        );
    }

    let obel_x5phy_ls = vrf.find_bel_sibling(bel, bels::X5PHY_LS[nidx]);
    for i in 0..2 {
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("PHY2IOB_DYNAMIC_DCI_TS{i}")),
            obel_x5phy_ls.wire(&format!("PHY2IOB_DYNAMIC_DCI_TS{ii}", ii = iidx * 2 + i)),
        );
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("PHY2IOB_KEEPER_EN{i}")),
            obel_x5phy_ls.wire(&format!("PHY2IOB_KEEPER_EN{ii}", ii = iidx * 2 + i)),
        );
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("PHY2IOB_LP_TX_O_OR_PU_EN_{i}")),
            obel_x5phy_ls.wire(&format!("PHY2IOB_LP_TX_O_OR_PU_EN_{i}_{iidx}")),
        );
    }
    vrf.claim_pip(
        bel.crd(),
        bel.wire("PHY2IOB_IBUF_DIS_OR_HS_RX_DIS_0"),
        obel_x5phy_ls.wire(&format!("PHY2IOB_IBUF_DISABLE{ii}", ii = iidx * 2)),
    );
    vrf.claim_pip(
        bel.crd(),
        bel.wire("PHY2IOB_IBUF_DISABLE_1"),
        obel_x5phy_ls.wire(&format!("PHY2IOB_IBUF_DISABLE{ii}", ii = iidx * 2 + 1)),
    );
    vrf.claim_pip(
        bel.crd(),
        bel.wire("PHY2IOB_LP_RX_DIS_OR_TERM_EN"),
        obel_x5phy_ls.wire(&format!("PHY2IOB_LP_RX_DIS_OR_TERM_EN{iidx}")),
    );
    vrf.claim_pip(
        bel.crd(),
        bel.wire("PHY2IOB_LP_TX_T_OR_PD_EN_0"),
        obel_x5phy_ls.wire(&format!("PHY2IOB_LP_TX_T_OR_PD_EN_0_{iidx}")),
    );
    vrf.claim_pip(
        bel.crd(),
        bel.wire("PHY2IOB_PD_EN_1"),
        obel_x5phy_ls.wire(&format!("PHY2IOB_PD_EN_1_{iidx}")),
    );
}

pub const X5PHY_HS_FROM_LS: &[(&str, &str)] = &[
    ("CE_DQSGATE", "IF_XPHY_LS_HS_LCT_CE_DQSGATE_DELAY"),
    ("CE_IDELAY0", "IF_XPHY_LS_HS_LCT_CE_IDELAY0"),
    ("CE_IDELAY1", "IF_XPHY_LS_HS_LCT_CE_IDELAY1"),
    ("CE_IDELAY2", "IF_XPHY_LS_HS_LCT_CE_IDELAY2"),
    ("CE_IDELAY3", "IF_XPHY_LS_HS_LCT_CE_IDELAY3"),
    ("CE_IDELAY4", "IF_XPHY_LS_HS_LCT_CE_IDELAY4"),
    ("CE_IDELAY5", "IF_XPHY_LS_HS_LCT_CE_IDELAY5"),
    ("CE_MASTER", "IF_XPHY_LS_HS_LCT_CE_MASTER_DELAY"),
    ("CE_NQTR", "IF_XPHY_LS_HS_LCT_CE_NQTR_DELAY"),
    ("CE_ODELAY0", "IF_XPHY_LS_HS_LCT_CE_ODELAY0"),
    ("CE_ODELAY1", "IF_XPHY_LS_HS_LCT_CE_ODELAY1"),
    ("CE_ODELAY2", "IF_XPHY_LS_HS_LCT_CE_ODELAY2"),
    ("CE_ODELAY3", "IF_XPHY_LS_HS_LCT_CE_ODELAY3"),
    ("CE_ODELAY4", "IF_XPHY_LS_HS_LCT_CE_ODELAY4"),
    ("CE_ODELAY5", "IF_XPHY_LS_HS_LCT_CE_ODELAY5"),
    ("CE_PQTR", "IF_XPHY_LS_HS_LCT_CE_PQTR_DELAY"),
    (
        "CE_RST_B_DQSGATE",
        "IF_XPHY_LS_HS_LCT_CE_RST_B_DQSGATE_DELAY",
    ),
    ("CE_RST_B_IDELAY0", "IF_XPHY_LS_HS_LCT_CE_RST_B_IDELAY0"),
    ("CE_RST_B_IDELAY1", "IF_XPHY_LS_HS_LCT_CE_RST_B_IDELAY1"),
    ("CE_RST_B_IDELAY2", "IF_XPHY_LS_HS_LCT_CE_RST_B_IDELAY2"),
    ("CE_RST_B_IDELAY3", "IF_XPHY_LS_HS_LCT_CE_RST_B_IDELAY3"),
    ("CE_RST_B_IDELAY4", "IF_XPHY_LS_HS_LCT_CE_RST_B_IDELAY4"),
    ("CE_RST_B_IDELAY5", "IF_XPHY_LS_HS_LCT_CE_RST_B_IDELAY5"),
    ("CE_RST_B_MASTER", "IF_XPHY_LS_HS_LCT_CE_RST_B_MASTER_DELAY"),
    ("CE_RST_B_NQTR", "IF_XPHY_LS_HS_LCT_CE_RST_B_NQTR_DELAY"),
    ("CE_RST_B_ODELAY0", "IF_XPHY_LS_HS_LCT_CE_RST_B_ODELAY0"),
    ("CE_RST_B_ODELAY1", "IF_XPHY_LS_HS_LCT_CE_RST_B_ODELAY1"),
    ("CE_RST_B_ODELAY2", "IF_XPHY_LS_HS_LCT_CE_RST_B_ODELAY2"),
    ("CE_RST_B_ODELAY3", "IF_XPHY_LS_HS_LCT_CE_RST_B_ODELAY3"),
    ("CE_RST_B_ODELAY4", "IF_XPHY_LS_HS_LCT_CE_RST_B_ODELAY4"),
    ("CE_RST_B_ODELAY5", "IF_XPHY_LS_HS_LCT_CE_RST_B_ODELAY5"),
    ("CE_RST_B_PQTR", "IF_XPHY_LS_HS_LCT_CE_RST_B_PQTR_DELAY"),
    (
        "CE_RST_B_TRI_ODELAY",
        "IF_XPHY_LS_HS_LCT_CE_RST_B_TRI_ODELAY",
    ),
    ("CE_TRI_ODELAY", "IF_XPHY_LS_HS_LCT_CE_TRI_ODELAY"),
    (
        "CLB2PHY_LP_TX_O_OR_PU_EN_0_0",
        "IF_XPHY_LS_HS_LSHS_LP_TX_O_OR_PU_EN_0_0",
    ),
    (
        "CLB2PHY_LP_TX_O_OR_PU_EN_0_1",
        "IF_XPHY_LS_HS_LSHS_LP_TX_O_OR_PU_EN_0_1",
    ),
    (
        "CLB2PHY_LP_TX_O_OR_PU_EN_0_2",
        "IF_XPHY_LS_HS_LSHS_LP_TX_O_OR_PU_EN_0_2",
    ),
    (
        "CLB2PHY_LP_TX_O_OR_PU_EN_1_0",
        "IF_XPHY_LS_HS_LSHS_LP_TX_O_OR_PU_EN_1_0",
    ),
    (
        "CLB2PHY_LP_TX_O_OR_PU_EN_1_1",
        "IF_XPHY_LS_HS_LSHS_LP_TX_O_OR_PU_EN_1_1",
    ),
    (
        "CLB2PHY_LP_TX_O_OR_PU_EN_1_2",
        "IF_XPHY_LS_HS_LSHS_LP_TX_O_OR_PU_EN_1_2",
    ),
    (
        "CLB2PHY_LP_TX_T_OR_PD_EN_0_0",
        "IF_XPHY_LS_HS_LSHS_LP_TX_T_OR_PD_EN_0_0",
    ),
    (
        "CLB2PHY_LP_TX_T_OR_PD_EN_0_1",
        "IF_XPHY_LS_HS_LSHS_LP_TX_T_OR_PD_EN_0_1",
    ),
    (
        "CLB2PHY_LP_TX_T_OR_PD_EN_0_2",
        "IF_XPHY_LS_HS_LSHS_LP_TX_T_OR_PD_EN_0_2",
    ),
    ("CNTVALUEIN_DQSGATE0", "IF_XPHY_LS_HS_DQSGATE_CNTVALUEOUT0"),
    ("CNTVALUEIN_DQSGATE1", "IF_XPHY_LS_HS_DQSGATE_CNTVALUEOUT1"),
    ("CNTVALUEIN_DQSGATE2", "IF_XPHY_LS_HS_DQSGATE_CNTVALUEOUT2"),
    ("CNTVALUEIN_DQSGATE3", "IF_XPHY_LS_HS_DQSGATE_CNTVALUEOUT3"),
    ("CNTVALUEIN_DQSGATE4", "IF_XPHY_LS_HS_DQSGATE_CNTVALUEOUT4"),
    ("CNTVALUEIN_DQSGATE5", "IF_XPHY_LS_HS_DQSGATE_CNTVALUEOUT5"),
    ("CNTVALUEIN_DQSGATE6", "IF_XPHY_LS_HS_DQSGATE_CNTVALUEOUT6"),
    ("CNTVALUEIN_DQSGATE7", "IF_XPHY_LS_HS_DQSGATE_CNTVALUEOUT7"),
    ("CNTVALUEIN_DQSGATE8", "IF_XPHY_LS_HS_DQSGATE_CNTVALUEOUT8"),
    ("CNTVALUEIN_IDELAY0", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT0"),
    ("CNTVALUEIN_IDELAY10", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT10"),
    ("CNTVALUEIN_IDELAY11", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT11"),
    ("CNTVALUEIN_IDELAY12", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT12"),
    ("CNTVALUEIN_IDELAY13", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT13"),
    ("CNTVALUEIN_IDELAY14", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT14"),
    ("CNTVALUEIN_IDELAY15", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT15"),
    ("CNTVALUEIN_IDELAY16", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT16"),
    ("CNTVALUEIN_IDELAY17", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT17"),
    ("CNTVALUEIN_IDELAY18", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT18"),
    ("CNTVALUEIN_IDELAY19", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT19"),
    ("CNTVALUEIN_IDELAY1", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT1"),
    ("CNTVALUEIN_IDELAY20", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT20"),
    ("CNTVALUEIN_IDELAY21", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT21"),
    ("CNTVALUEIN_IDELAY22", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT22"),
    ("CNTVALUEIN_IDELAY23", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT23"),
    ("CNTVALUEIN_IDELAY24", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT24"),
    ("CNTVALUEIN_IDELAY25", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT25"),
    ("CNTVALUEIN_IDELAY26", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT26"),
    ("CNTVALUEIN_IDELAY27", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT27"),
    ("CNTVALUEIN_IDELAY28", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT28"),
    ("CNTVALUEIN_IDELAY29", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT29"),
    ("CNTVALUEIN_IDELAY2", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT2"),
    ("CNTVALUEIN_IDELAY30", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT30"),
    ("CNTVALUEIN_IDELAY31", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT31"),
    ("CNTVALUEIN_IDELAY32", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT32"),
    ("CNTVALUEIN_IDELAY33", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT33"),
    ("CNTVALUEIN_IDELAY34", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT34"),
    ("CNTVALUEIN_IDELAY35", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT35"),
    ("CNTVALUEIN_IDELAY36", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT36"),
    ("CNTVALUEIN_IDELAY37", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT37"),
    ("CNTVALUEIN_IDELAY38", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT38"),
    ("CNTVALUEIN_IDELAY39", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT39"),
    ("CNTVALUEIN_IDELAY3", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT3"),
    ("CNTVALUEIN_IDELAY40", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT40"),
    ("CNTVALUEIN_IDELAY41", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT41"),
    ("CNTVALUEIN_IDELAY42", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT42"),
    ("CNTVALUEIN_IDELAY43", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT43"),
    ("CNTVALUEIN_IDELAY44", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT44"),
    ("CNTVALUEIN_IDELAY45", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT45"),
    ("CNTVALUEIN_IDELAY46", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT46"),
    ("CNTVALUEIN_IDELAY47", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT47"),
    ("CNTVALUEIN_IDELAY48", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT48"),
    ("CNTVALUEIN_IDELAY49", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT49"),
    ("CNTVALUEIN_IDELAY4", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT4"),
    ("CNTVALUEIN_IDELAY50", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT50"),
    ("CNTVALUEIN_IDELAY51", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT51"),
    ("CNTVALUEIN_IDELAY52", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT52"),
    ("CNTVALUEIN_IDELAY53", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT53"),
    ("CNTVALUEIN_IDELAY5", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT5"),
    ("CNTVALUEIN_IDELAY6", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT6"),
    ("CNTVALUEIN_IDELAY7", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT7"),
    ("CNTVALUEIN_IDELAY8", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT8"),
    ("CNTVALUEIN_IDELAY9", "IF_XPHY_LS_HS_IDELAY_CNTVALUEOUT9"),
    ("CNTVALUEIN_MASTER0", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT0"),
    ("CNTVALUEIN_MASTER1", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT1"),
    ("CNTVALUEIN_MASTER2", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT2"),
    ("CNTVALUEIN_MASTER3", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT3"),
    ("CNTVALUEIN_MASTER4", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT4"),
    ("CNTVALUEIN_MASTER5", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT5"),
    ("CNTVALUEIN_MASTER6", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT6"),
    ("CNTVALUEIN_MASTER7", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT7"),
    ("CNTVALUEIN_MASTER8", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT8"),
    ("CNTVALUEIN_MASTER9", "IF_XPHY_LS_HS_MASTER_CNTVALUEOUT9"),
    ("CNTVALUEIN_NQTR0", "IF_XPHY_LS_HS_NQTR_CNTVALUEOUT0"),
    ("CNTVALUEIN_NQTR1", "IF_XPHY_LS_HS_NQTR_CNTVALUEOUT1"),
    ("CNTVALUEIN_NQTR2", "IF_XPHY_LS_HS_NQTR_CNTVALUEOUT2"),
    ("CNTVALUEIN_NQTR3", "IF_XPHY_LS_HS_NQTR_CNTVALUEOUT3"),
    ("CNTVALUEIN_NQTR4", "IF_XPHY_LS_HS_NQTR_CNTVALUEOUT4"),
    ("CNTVALUEIN_NQTR5", "IF_XPHY_LS_HS_NQTR_CNTVALUEOUT5"),
    ("CNTVALUEIN_NQTR6", "IF_XPHY_LS_HS_NQTR_CNTVALUEOUT6"),
    ("CNTVALUEIN_NQTR7", "IF_XPHY_LS_HS_NQTR_CNTVALUEOUT7"),
    ("CNTVALUEIN_NQTR8", "IF_XPHY_LS_HS_NQTR_CNTVALUEOUT8"),
    ("CNTVALUEIN_ODELAY0", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT0"),
    ("CNTVALUEIN_ODELAY10", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT10"),
    ("CNTVALUEIN_ODELAY11", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT11"),
    ("CNTVALUEIN_ODELAY12", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT12"),
    ("CNTVALUEIN_ODELAY13", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT13"),
    ("CNTVALUEIN_ODELAY14", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT14"),
    ("CNTVALUEIN_ODELAY15", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT15"),
    ("CNTVALUEIN_ODELAY16", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT16"),
    ("CNTVALUEIN_ODELAY17", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT17"),
    ("CNTVALUEIN_ODELAY18", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT18"),
    ("CNTVALUEIN_ODELAY19", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT19"),
    ("CNTVALUEIN_ODELAY1", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT1"),
    ("CNTVALUEIN_ODELAY20", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT20"),
    ("CNTVALUEIN_ODELAY21", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT21"),
    ("CNTVALUEIN_ODELAY22", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT22"),
    ("CNTVALUEIN_ODELAY23", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT23"),
    ("CNTVALUEIN_ODELAY24", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT24"),
    ("CNTVALUEIN_ODELAY25", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT25"),
    ("CNTVALUEIN_ODELAY26", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT26"),
    ("CNTVALUEIN_ODELAY27", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT27"),
    ("CNTVALUEIN_ODELAY28", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT28"),
    ("CNTVALUEIN_ODELAY29", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT29"),
    ("CNTVALUEIN_ODELAY2", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT2"),
    ("CNTVALUEIN_ODELAY30", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT30"),
    ("CNTVALUEIN_ODELAY31", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT31"),
    ("CNTVALUEIN_ODELAY32", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT32"),
    ("CNTVALUEIN_ODELAY33", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT33"),
    ("CNTVALUEIN_ODELAY34", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT34"),
    ("CNTVALUEIN_ODELAY35", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT35"),
    ("CNTVALUEIN_ODELAY36", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT36"),
    ("CNTVALUEIN_ODELAY37", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT37"),
    ("CNTVALUEIN_ODELAY38", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT38"),
    ("CNTVALUEIN_ODELAY39", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT39"),
    ("CNTVALUEIN_ODELAY3", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT3"),
    ("CNTVALUEIN_ODELAY40", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT40"),
    ("CNTVALUEIN_ODELAY41", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT41"),
    ("CNTVALUEIN_ODELAY42", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT42"),
    ("CNTVALUEIN_ODELAY43", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT43"),
    ("CNTVALUEIN_ODELAY44", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT44"),
    ("CNTVALUEIN_ODELAY45", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT45"),
    ("CNTVALUEIN_ODELAY46", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT46"),
    ("CNTVALUEIN_ODELAY47", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT47"),
    ("CNTVALUEIN_ODELAY48", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT48"),
    ("CNTVALUEIN_ODELAY49", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT49"),
    ("CNTVALUEIN_ODELAY4", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT4"),
    ("CNTVALUEIN_ODELAY50", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT50"),
    ("CNTVALUEIN_ODELAY51", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT51"),
    ("CNTVALUEIN_ODELAY52", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT52"),
    ("CNTVALUEIN_ODELAY53", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT53"),
    ("CNTVALUEIN_ODELAY5", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT5"),
    ("CNTVALUEIN_ODELAY6", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT6"),
    ("CNTVALUEIN_ODELAY7", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT7"),
    ("CNTVALUEIN_ODELAY8", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT8"),
    ("CNTVALUEIN_ODELAY9", "IF_XPHY_LS_HS_ODELAY_CNTVALUEOUT9"),
    ("CNTVALUEIN_PQTR0", "IF_XPHY_LS_HS_PQTR_CNTVALUEOUT0"),
    ("CNTVALUEIN_PQTR1", "IF_XPHY_LS_HS_PQTR_CNTVALUEOUT1"),
    ("CNTVALUEIN_PQTR2", "IF_XPHY_LS_HS_PQTR_CNTVALUEOUT2"),
    ("CNTVALUEIN_PQTR3", "IF_XPHY_LS_HS_PQTR_CNTVALUEOUT3"),
    ("CNTVALUEIN_PQTR4", "IF_XPHY_LS_HS_PQTR_CNTVALUEOUT4"),
    ("CNTVALUEIN_PQTR5", "IF_XPHY_LS_HS_PQTR_CNTVALUEOUT5"),
    ("CNTVALUEIN_PQTR6", "IF_XPHY_LS_HS_PQTR_CNTVALUEOUT6"),
    ("CNTVALUEIN_PQTR7", "IF_XPHY_LS_HS_PQTR_CNTVALUEOUT7"),
    ("CNTVALUEIN_PQTR8", "IF_XPHY_LS_HS_PQTR_CNTVALUEOUT8"),
    (
        "CNTVALUEIN_TRI_ODELAY0",
        "IF_XPHY_LS_HS_PHY2CLB_TRISTATE_ODELAY_CNTVALUEOUT0",
    ),
    (
        "CNTVALUEIN_TRI_ODELAY1",
        "IF_XPHY_LS_HS_PHY2CLB_TRISTATE_ODELAY_CNTVALUEOUT1",
    ),
    (
        "CNTVALUEIN_TRI_ODELAY2",
        "IF_XPHY_LS_HS_PHY2CLB_TRISTATE_ODELAY_CNTVALUEOUT2",
    ),
    (
        "CNTVALUEIN_TRI_ODELAY3",
        "IF_XPHY_LS_HS_PHY2CLB_TRISTATE_ODELAY_CNTVALUEOUT3",
    ),
    (
        "CNTVALUEIN_TRI_ODELAY4",
        "IF_XPHY_LS_HS_PHY2CLB_TRISTATE_ODELAY_CNTVALUEOUT4",
    ),
    (
        "CNTVALUEIN_TRI_ODELAY5",
        "IF_XPHY_LS_HS_PHY2CLB_TRISTATE_ODELAY_CNTVALUEOUT5",
    ),
    (
        "CNTVALUEIN_TRI_ODELAY6",
        "IF_XPHY_LS_HS_PHY2CLB_TRISTATE_ODELAY_CNTVALUEOUT6",
    ),
    (
        "CNTVALUEIN_TRI_ODELAY7",
        "IF_XPHY_LS_HS_PHY2CLB_TRISTATE_ODELAY_CNTVALUEOUT7",
    ),
    (
        "CNTVALUEIN_TRI_ODELAY8",
        "IF_XPHY_LS_HS_PHY2CLB_TRISTATE_ODELAY_CNTVALUEOUT8",
    ),
    (
        "CTRL_DYN_MODE_EN_DQSGATE",
        "IF_XPHY_LS_HS_LCT_CTRL_DYN_MODE_EN_DQSGATE",
    ),
    (
        "CTRL_DYN_MODE_EN_TX",
        "IF_XPHY_LS_HS_LCT_CTRL_DYN_MODE_EN_TX",
    ),
    ("EN_DQS_BISC", "IF_XPHY_LS_HS_EN_DQS_BISC"),
    ("FIXDLY_RDY", "IF_XPHY_LS_HS_FIXDLY_RDY"),
    (
        "HTR_EN_DIV_DLY_OE_ARRAY_DL_TST0",
        "IF_XPHY_LS_HS_HTR_EN_DIV_DLY_OE_ARRAY_DL_TST0",
    ),
    (
        "HTR_EN_DIV_DLY_OE_ARRAY_DL_TST1",
        "IF_XPHY_LS_HS_HTR_EN_DIV_DLY_OE_ARRAY_DL_TST1",
    ),
    (
        "HTR_EN_DIV_DLY_OE_ARRAY_DL_TST2",
        "IF_XPHY_LS_HS_HTR_EN_DIV_DLY_OE_ARRAY_DL_TST2",
    ),
    (
        "HTR_EN_DIV_DLY_OE_ARRAY_DL_TST3",
        "IF_XPHY_LS_HS_HTR_EN_DIV_DLY_OE_ARRAY_DL_TST3",
    ),
    (
        "HTR_EN_DIV_DLY_OE_ARRAY_DL_TST4",
        "IF_XPHY_LS_HS_HTR_EN_DIV_DLY_OE_ARRAY_DL_TST4",
    ),
    (
        "HTR_EN_DIV_DLY_OE_ARRAY_DL_TST5",
        "IF_XPHY_LS_HS_HTR_EN_DIV_DLY_OE_ARRAY_DL_TST5",
    ),
    (
        "HTR_EN_DIV_DLY_OE_ARRAY_DL_TST6",
        "IF_XPHY_LS_HS_HTR_EN_DIV_DLY_OE_ARRAY_DL_TST6",
    ),
    (
        "HTR_EN_DIV_DLY_OE_ARRAY_DL_TST7",
        "IF_XPHY_LS_HS_HTR_EN_DIV_DLY_OE_ARRAY_DL_TST7",
    ),
    ("LCG_RX_BS_RST_DIV2", "IF_XPHY_LS_HS_LCG_RX_BS_RST_DIV2"),
    ("LCG_RX_EN_SDR", "IF_XPHY_LS_HS_LCG_RX_EN_SDR"),
    ("LCG_RX_PH_180_Q2", "IF_XPHY_LS_HS_LCG_RX_PH_180_Q2"),
    ("LCG_RX_PH_SDR_090", "IF_XPHY_LS_HS_LCG_RX_PH_SDR_090"),
    ("LCG_RX_PH_SDR_180", "IF_XPHY_LS_HS_LCG_RX_PH_SDR_180"),
    ("LCG_TRISTATE_DIV_CLK", "IF_XPHY_LS_HS_LCG_TRISTATE_DIV_CLK"),
    ("LCG_TX_BS_RST_DIV2", "IF_XPHY_LS_HS_LCG_TX_BS_RST_DIV2"),
    ("LCG_TX_EN_SDR", "IF_XPHY_LS_HS_LCG_TX_EN_SDR"),
    ("LCG_TX_PH_180_Q2", "IF_XPHY_LS_HS_LCG_TX_PH_180_Q2"),
    ("LCG_TX_PH_SDR_090", "IF_XPHY_LS_HS_LCG_TX_PH_SDR_090"),
    ("LCG_TX_PH_SDR_180", "IF_XPHY_LS_HS_LCG_TX_PH_SDR_180"),
    ("LCT_BSC_PHY_RDY", "IF_XPHY_LS_HS_PHY_RDY"),
    ("LCT_CONTROL_CLK", "IF_XPHY_LS_HS_LCT_CONTROL_CLK"),
    (
        "LCT_CTL2BS_FIFO_BYPASS0",
        "IF_XPHY_LS_HS_CTL2BS_FIFO_BYPASS0",
    ),
    (
        "LCT_CTL2BS_FIFO_BYPASS1",
        "IF_XPHY_LS_HS_CTL2BS_FIFO_BYPASS1",
    ),
    (
        "LCT_CTL2BS_FIFO_BYPASS2",
        "IF_XPHY_LS_HS_CTL2BS_FIFO_BYPASS2",
    ),
    (
        "LCT_CTL2BS_FIFO_BYPASS3",
        "IF_XPHY_LS_HS_CTL2BS_FIFO_BYPASS3",
    ),
    (
        "LCT_CTL2BS_FIFO_BYPASS4",
        "IF_XPHY_LS_HS_CTL2BS_FIFO_BYPASS4",
    ),
    (
        "LCT_CTL2BS_FIFO_BYPASS5",
        "IF_XPHY_LS_HS_CTL2BS_FIFO_BYPASS5",
    ),
    (
        "LCT_CTL2BS_FIFO_BYPASS6",
        "IF_XPHY_LS_HS_CTL2BS_FIFO_BYPASS6",
    ),
    (
        "LCT_CTL2BS_REFCLK_EN0",
        "IF_XPHY_LS_HS_LCT_CTL2BS_REFCLK_EN0",
    ),
    (
        "LCT_CTL2BS_REFCLK_EN1",
        "IF_XPHY_LS_HS_LCT_CTL2BS_REFCLK_EN1",
    ),
    (
        "LCT_CTL2BS_REFCLK_EN2",
        "IF_XPHY_LS_HS_LCT_CTL2BS_REFCLK_EN2",
    ),
    (
        "LCT_CTL2BS_REFCLK_EN3",
        "IF_XPHY_LS_HS_LCT_CTL2BS_REFCLK_EN3",
    ),
    (
        "LCT_CTL2BS_REFCLK_EN4",
        "IF_XPHY_LS_HS_LCT_CTL2BS_REFCLK_EN4",
    ),
    (
        "LCT_CTL2BS_REFCLK_EN5",
        "IF_XPHY_LS_HS_LCT_CTL2BS_REFCLK_EN5",
    ),
    (
        "LCT_CTL2BS_REFCLK_EN6",
        "IF_XPHY_LS_HS_LCT_CTL2BS_REFCLK_EN6",
    ),
    (
        "LCT_CTL2BS_TX_DDR_PHASE_SEL0",
        "IF_XPHY_LS_HS_LCT_CTL2BS_TX_DDR_PHASE_SEL0",
    ),
    (
        "LCT_CTL2BS_TX_DDR_PHASE_SEL1",
        "IF_XPHY_LS_HS_LCT_CTL2BS_TX_DDR_PHASE_SEL1",
    ),
    (
        "LCT_CTL2BS_TX_DDR_PHASE_SEL2",
        "IF_XPHY_LS_HS_LCT_CTL2BS_TX_DDR_PHASE_SEL2",
    ),
    (
        "LCT_CTL2BS_TX_DDR_PHASE_SEL3",
        "IF_XPHY_LS_HS_LCT_CTL2BS_TX_DDR_PHASE_SEL3",
    ),
    (
        "LCT_CTL2BS_TX_DDR_PHASE_SEL4",
        "IF_XPHY_LS_HS_LCT_CTL2BS_TX_DDR_PHASE_SEL4",
    ),
    (
        "LCT_CTL2BS_TX_DDR_PHASE_SEL5",
        "IF_XPHY_LS_HS_LCT_CTL2BS_TX_DDR_PHASE_SEL5",
    ),
    (
        "LCT_CTL2BS_TX_TRISTATE_DATA_PHASE",
        "IF_XPHY_LS_HS_LCT_CTL2BS_TX_TRISTATE_DATA_PHASE",
    ),
    ("LCT_GT_CTRL0", "IF_XPHY_LS_HS_LCT_GT_CTRL0"),
    ("LCT_GT_CTRL10", "IF_XPHY_LS_HS_LCT_GT_CTRL10"),
    ("LCT_GT_CTRL11", "IF_XPHY_LS_HS_LCT_GT_CTRL11"),
    ("LCT_GT_CTRL12", "IF_XPHY_LS_HS_LCT_GT_CTRL12"),
    ("LCT_GT_CTRL13", "IF_XPHY_LS_HS_LCT_GT_CTRL13"),
    ("LCT_GT_CTRL14", "IF_XPHY_LS_HS_LCT_GT_CTRL14"),
    ("LCT_GT_CTRL1", "IF_XPHY_LS_HS_LCT_GT_CTRL1"),
    ("LCT_GT_CTRL2", "IF_XPHY_LS_HS_LCT_GT_CTRL2"),
    ("LCT_GT_CTRL3", "IF_XPHY_LS_HS_LCT_GT_CTRL3"),
    ("LCT_GT_CTRL4", "IF_XPHY_LS_HS_LCT_GT_CTRL4"),
    ("LCT_GT_CTRL5", "IF_XPHY_LS_HS_LCT_GT_CTRL5"),
    ("LCT_GT_CTRL6", "IF_XPHY_LS_HS_LCT_GT_CTRL6"),
    ("LCT_GT_CTRL7", "IF_XPHY_LS_HS_LCT_GT_CTRL7"),
    ("LCT_GT_CTRL8", "IF_XPHY_LS_HS_LCT_GT_CTRL8"),
    ("LCT_GT_CTRL9", "IF_XPHY_LS_HS_LCT_GT_CTRL9"),
    ("LCT_GT_RX_GATE_B", "IF_XPHY_LS_HS_LCT_GT_RX_GATE_B"),
    ("LCT_GT_STATUS_REQ", "IF_XPHY_LS_HS_LCT_GT_STATUS_REQ"),
    ("LCT_RIU_CLR_GATE_SMX", "IF_XPHY_LS_HS_RIU_CLR_GATE"),
    (
        "LCT_RIU_RXGATE_EXTEND",
        "IF_XPHY_LS_HS_RIU_NIBBLE_CTRL0_RXGATING_EXTEND",
    ),
    ("LCT_RIU_RX_GATE", "IF_XPHY_LS_HS_LCT_RIU_RX_GATE"),
    (
        "LCT_RIU_SERIAL_MODE",
        "IF_XPHY_LS_HS_RIU_NIBBLE_CTRL0_SERIAL_MODE",
    ),
    ("LCT_RST_B", "IF_XPHY_LS_HS_LCT_RST_B"),
    ("LCT_RX_RST_GATED_B0", "IF_XPHY_LS_HS_LCT_RX_RST_GATED_B0"),
    ("LCT_RX_RST_GATED_B1", "IF_XPHY_LS_HS_LCT_RX_RST_GATED_B1"),
    ("LCT_RX_RST_GATED_B2", "IF_XPHY_LS_HS_LCT_RX_RST_GATED_B2"),
    ("LCT_RX_RST_GATED_B3", "IF_XPHY_LS_HS_LCT_RX_RST_GATED_B3"),
    ("LCT_RX_RST_GATED_B4", "IF_XPHY_LS_HS_LCT_RX_RST_GATED_B4"),
    ("LCT_RX_RST_GATED_B5", "IF_XPHY_LS_HS_LCT_RX_RST_GATED_B5"),
    ("LCT_TX_RST_GATED0", "IF_XPHY_LS_HS_LCT_TX_RST_GATED0"),
    ("LCT_TX_RST_GATED1", "IF_XPHY_LS_HS_LCT_TX_RST_GATED1"),
    ("LCT_TX_RST_GATED2", "IF_XPHY_LS_HS_LCT_TX_RST_GATED2"),
    ("LCT_TX_RST_GATED3", "IF_XPHY_LS_HS_LCT_TX_RST_GATED3"),
    ("LCT_TX_RST_GATED4", "IF_XPHY_LS_HS_LCT_TX_RST_GATED4"),
    ("LCT_TX_RST_GATED5", "IF_XPHY_LS_HS_LCT_TX_RST_GATED5"),
    ("LCT_WL_TRAIN_BUS0", "IF_XPHY_LS_HS_LCT_WL_TRAIN_BUS0"),
    ("LCT_WL_TRAIN_BUS1", "IF_XPHY_LS_HS_LCT_WL_TRAIN_BUS1"),
    ("LCT_WL_TRAIN_BUS2", "IF_XPHY_LS_HS_LCT_WL_TRAIN_BUS2"),
    ("LCT_WL_TRAIN_BUS3", "IF_XPHY_LS_HS_LCT_WL_TRAIN_BUS3"),
    ("LCT_WL_TRAIN_BUS4", "IF_XPHY_LS_HS_LCT_WL_TRAIN_BUS4"),
    ("LCT_WL_TRAIN_BUS5", "IF_XPHY_LS_HS_LCT_WL_TRAIN_BUS5"),
    ("LCT_WL_TRAIN_REFCLK0", "IF_XPHY_LS_HS_LCT_WL_TRAIN_REFCLK0"),
    ("LCT_WL_TRAIN_REFCLK1", "IF_XPHY_LS_HS_LCT_WL_TRAIN_REFCLK1"),
    ("LCT_WL_TRAIN_REFCLK2", "IF_XPHY_LS_HS_LCT_WL_TRAIN_REFCLK2"),
    ("LCT_WL_TRAIN_REFCLK3", "IF_XPHY_LS_HS_LCT_WL_TRAIN_REFCLK3"),
    ("LCT_WL_TRAIN_REFCLK4", "IF_XPHY_LS_HS_LCT_WL_TRAIN_REFCLK4"),
    ("LCT_WL_TRAIN_REFCLK5", "IF_XPHY_LS_HS_LCT_WL_TRAIN_REFCLK5"),
    ("LDC_T_TXBIT0", "IF_XPHY_LS_HS_TX_T0"),
    ("LDC_T_TXBIT1", "IF_XPHY_LS_HS_TX_T1"),
    ("LDC_T_TXBIT2", "IF_XPHY_LS_HS_TX_T2"),
    ("LDC_T_TXBIT3", "IF_XPHY_LS_HS_TX_T3"),
    ("LDC_T_TXBIT4", "IF_XPHY_LS_HS_TX_T4"),
    ("LDC_T_TXBIT5", "IF_XPHY_LS_HS_TX_T5"),
    ("LD_DQSGATE", "IF_XPHY_LS_HS_LCT_LD_DQSGATE_DELAY"),
    ("LD_IDELAY0", "IF_XPHY_LS_HS_LCT_LD_IDELAY0"),
    ("LD_IDELAY1", "IF_XPHY_LS_HS_LCT_LD_IDELAY1"),
    ("LD_IDELAY2", "IF_XPHY_LS_HS_LCT_LD_IDELAY2"),
    ("LD_IDELAY3", "IF_XPHY_LS_HS_LCT_LD_IDELAY3"),
    ("LD_IDELAY4", "IF_XPHY_LS_HS_LCT_LD_IDELAY4"),
    ("LD_IDELAY5", "IF_XPHY_LS_HS_LCT_LD_IDELAY5"),
    ("LD_MASTER", "IF_XPHY_LS_HS_LCT_LD_MASTER_DELAY"),
    ("LD_NQTR", "IF_XPHY_LS_HS_LCT_LD_NQTR_DELAY"),
    ("LD_ODELAY0", "IF_XPHY_LS_HS_LCT_LD_ODELAY0"),
    ("LD_ODELAY1", "IF_XPHY_LS_HS_LCT_LD_ODELAY1"),
    ("LD_ODELAY2", "IF_XPHY_LS_HS_LCT_LD_ODELAY2"),
    ("LD_ODELAY3", "IF_XPHY_LS_HS_LCT_LD_ODELAY3"),
    ("LD_ODELAY4", "IF_XPHY_LS_HS_LCT_LD_ODELAY4"),
    ("LD_ODELAY5", "IF_XPHY_LS_HS_LCT_LD_ODELAY5"),
    ("LD_PQTR", "IF_XPHY_LS_HS_LCT_LD_PQTR_DELAY"),
    ("LD_TRI_ODELAY", "IF_XPHY_LS_HS_LCT_LD_TRI_ODELAY"),
    ("LE_MASTER", "IF_XPHY_LS_HS_LCT_LE_MASTER_DELAY"),
    ("LE_NQTR", "IF_XPHY_LS_HS_LCT_LE_NQTR_DELAY"),
    ("LE_ODELAY0", "IF_XPHY_LS_HS_LCT_LE_ODELAY0"),
    ("LE_ODELAY1", "IF_XPHY_LS_HS_LCT_LE_ODELAY1"),
    ("LE_ODELAY2", "IF_XPHY_LS_HS_LCT_LE_ODELAY2"),
    ("LE_ODELAY3", "IF_XPHY_LS_HS_LCT_LE_ODELAY3"),
    ("LE_ODELAY4", "IF_XPHY_LS_HS_LCT_LE_ODELAY4"),
    ("LE_ODELAY5", "IF_XPHY_LS_HS_LCT_LE_ODELAY5"),
    ("LE_PQTR", "IF_XPHY_LS_HS_LCT_LE_PQTR_DELAY"),
    ("LRT_DIV2_MUX_A0", "IF_XPHY_LS_HS_LRT_DIV2_MUX_A0"),
    ("LRT_DIV2_MUX_A1", "IF_XPHY_LS_HS_LRT_DIV2_MUX_A1"),
    ("LRT_DIV2_MUX_A2", "IF_XPHY_LS_HS_LRT_DIV2_MUX_A2"),
    ("LRT_DIV2_MUX_A3", "IF_XPHY_LS_HS_LRT_DIV2_MUX_A3"),
    ("LRT_DIV2_MUX_A4", "IF_XPHY_LS_HS_LRT_DIV2_MUX_A4"),
    ("LRT_DIV2_MUX_A5", "IF_XPHY_LS_HS_LRT_DIV2_MUX_A5"),
    ("LRT_DIV2_MUX_B0", "IF_XPHY_LS_HS_LRT_DIV2_MUX_B0"),
    ("LRT_DIV2_MUX_B1", "IF_XPHY_LS_HS_LRT_DIV2_MUX_B1"),
    ("LRT_DIV2_MUX_B2", "IF_XPHY_LS_HS_LRT_DIV2_MUX_B2"),
    ("LRT_DIV2_MUX_B3", "IF_XPHY_LS_HS_LRT_DIV2_MUX_B3"),
    ("LRT_DIV2_MUX_B4", "IF_XPHY_LS_HS_LRT_DIV2_MUX_B4"),
    ("LRT_DIV2_MUX_B5", "IF_XPHY_LS_HS_LRT_DIV2_MUX_B5"),
    ("LRT_DIV2_MUX_C0", "IF_XPHY_LS_HS_LRT_DIV2_MUX_C0"),
    ("LRT_DIV2_MUX_C1", "IF_XPHY_LS_HS_LRT_DIV2_MUX_C1"),
    ("LRT_DIV2_MUX_C2", "IF_XPHY_LS_HS_LRT_DIV2_MUX_C2"),
    ("LRT_DIV2_MUX_C3", "IF_XPHY_LS_HS_LRT_DIV2_MUX_C3"),
    ("LRT_DIV2_MUX_C4", "IF_XPHY_LS_HS_LRT_DIV2_MUX_C4"),
    ("LRT_DIV2_MUX_C5", "IF_XPHY_LS_HS_LRT_DIV2_MUX_C5"),
    ("LRT_DIV2_MUX_D0", "IF_XPHY_LS_HS_LRT_DIV2_MUX_D0"),
    ("LRT_DIV2_MUX_D1", "IF_XPHY_LS_HS_LRT_DIV2_MUX_D1"),
    ("LRT_DIV2_MUX_D2", "IF_XPHY_LS_HS_LRT_DIV2_MUX_D2"),
    ("LRT_DIV2_MUX_D3", "IF_XPHY_LS_HS_LRT_DIV2_MUX_D3"),
    ("LRT_DIV2_MUX_D4", "IF_XPHY_LS_HS_LRT_DIV2_MUX_D4"),
    ("LRT_DIV2_MUX_D5", "IF_XPHY_LS_HS_LRT_DIV2_MUX_D5"),
    ("LRT_P0P2_DIV2_INT0", "IF_XPHY_LS_HS_LRT_P0P2_DIV2_INT0"),
    ("LRT_P0P2_DIV2_INT1", "IF_XPHY_LS_HS_LRT_P0P2_DIV2_INT1"),
    ("LRT_P0P2_DIV2_INT2", "IF_XPHY_LS_HS_LRT_P0P2_DIV2_INT2"),
    ("LRT_P0P2_DIV2_INT3", "IF_XPHY_LS_HS_LRT_P0P2_DIV2_INT3"),
    ("LRT_P0P2_DIV2_INT4", "IF_XPHY_LS_HS_LRT_P0P2_DIV2_INT4"),
    ("LRT_P0P2_DIV2_INT5", "IF_XPHY_LS_HS_LRT_P0P2_DIV2_INT5"),
    ("LTR_DIV2_MUX_A", "IF_XPHY_LS_HS_LTR_DIV2_MUX_A"),
    ("LTR_DIV2_MUX_B", "IF_XPHY_LS_HS_LTR_DIV2_MUX_B"),
    ("LTR_DIV2_MUX_C", "IF_XPHY_LS_HS_LTR_DIV2_MUX_C"),
    ("LTR_DIV2_MUX_D", "IF_XPHY_LS_HS_LTR_DIV2_MUX_D"),
    ("LTR_P0P2_DIV2_INT", "IF_XPHY_LS_HS_LTR_P0P2_DIV2_INT"),
    (
        "MANUAL_MODE_EN_SMX_DQSGATE",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_DQSGATE_DELAY",
    ),
    (
        "MANUAL_MODE_EN_SMX_IDELAY0",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_IDELAY0",
    ),
    (
        "MANUAL_MODE_EN_SMX_IDELAY1",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_IDELAY1",
    ),
    (
        "MANUAL_MODE_EN_SMX_IDELAY2",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_IDELAY2",
    ),
    (
        "MANUAL_MODE_EN_SMX_IDELAY3",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_IDELAY3",
    ),
    (
        "MANUAL_MODE_EN_SMX_IDELAY4",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_IDELAY4",
    ),
    (
        "MANUAL_MODE_EN_SMX_IDELAY5",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_IDELAY5",
    ),
    (
        "MANUAL_MODE_EN_SMX_MASTER",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_MASTER_DELAY",
    ),
    (
        "MANUAL_MODE_EN_SMX_NQTR",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_NQTR_DELAY",
    ),
    (
        "MANUAL_MODE_EN_SMX_ODELAY0",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_ODELAY0",
    ),
    (
        "MANUAL_MODE_EN_SMX_ODELAY1",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_ODELAY1",
    ),
    (
        "MANUAL_MODE_EN_SMX_ODELAY2",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_ODELAY2",
    ),
    (
        "MANUAL_MODE_EN_SMX_ODELAY3",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_ODELAY3",
    ),
    (
        "MANUAL_MODE_EN_SMX_ODELAY4",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_ODELAY4",
    ),
    (
        "MANUAL_MODE_EN_SMX_ODELAY5",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_ODELAY5",
    ),
    (
        "MANUAL_MODE_EN_SMX_PQTR",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_PQTR_DELAY",
    ),
    (
        "MANUAL_MODE_EN_SMX_TRI_ODELAY",
        "IF_XPHY_LS_HS_LCT_MANUAL_MODE_EN_SMX_TRI_ODELAY",
    ),
    ("PRIME_VAL", "IF_XPHY_LS_HS_PRIME_VAL"),
    (
        "RESET_DECODER_DQSGATE",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_DQSGATE_DELAY",
    ),
    (
        "RESET_DECODER_IDELAY0",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_IDELAY0",
    ),
    (
        "RESET_DECODER_IDELAY1",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_IDELAY1",
    ),
    (
        "RESET_DECODER_IDELAY2",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_IDELAY2",
    ),
    (
        "RESET_DECODER_IDELAY3",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_IDELAY3",
    ),
    (
        "RESET_DECODER_IDELAY4",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_IDELAY4",
    ),
    (
        "RESET_DECODER_IDELAY5",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_IDELAY5",
    ),
    (
        "RESET_DECODER_MASTER",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_MASTER_DELAY",
    ),
    (
        "RESET_DECODER_NQTR",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_NQTR_DELAY",
    ),
    (
        "RESET_DECODER_ODELAY0",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_ODELAY0",
    ),
    (
        "RESET_DECODER_ODELAY1",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_ODELAY1",
    ),
    (
        "RESET_DECODER_ODELAY2",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_ODELAY2",
    ),
    (
        "RESET_DECODER_ODELAY3",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_ODELAY3",
    ),
    (
        "RESET_DECODER_ODELAY4",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_ODELAY4",
    ),
    (
        "RESET_DECODER_ODELAY5",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_ODELAY5",
    ),
    (
        "RESET_DECODER_PQTR",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_PQTR_DELAY",
    ),
    (
        "RESET_DECODER_TRI_ODELAY",
        "IF_XPHY_LS_HS_LCT_RESET_DECODER_TRI_ODELAY",
    ),
    ("RIU_BS_RESET_TRI", "IF_XPHY_LS_HS_RIU_BS_RESET_TRI"),
    ("RIU_EN_1TCK_GAP", "IF_XPHY_LS_HS_RIU_EN_1TCK_GAP"),
    (
        "RIU_EN_NDQS",
        "IF_XPHY_LS_HS_RIU_NIBBLE_CTRL0_EN_OTHER_NCLK",
    ),
    (
        "RIU_EN_PDQS",
        "IF_XPHY_LS_HS_RIU_NIBBLE_CTRL0_EN_OTHER_PCLK",
    ),
    (
        "RIU_INVERT_RXCLK",
        "IF_XPHY_LS_HS_RIU_NIBBLE_CTRL0_INV_RXCLK",
    ),
    ("RIU_ISI_EN", "IF_XPHY_LS_HS_RIU_ISI_EN"),
    ("RIU_LP4_WL_DQS_90", "IF_XPHY_LS_HS_RIU_LP4_WL_DQS_90"),
    ("RIU_LPBK2RX_SEL0", "IF_XPHY_LS_HS_RIU_LPBK2RX_SEL0"),
    ("RIU_LPBK2RX_SEL1", "IF_XPHY_LS_HS_RIU_LPBK2RX_SEL1"),
    ("RIU_MON_RESET", "IF_XPHY_LS_HS_RIU_MON_RESET"),
    ("RIU_OSC_TEST_SEL0", "IF_XPHY_LS_HS_RIU_OSC_TEST_SEL0"),
    ("RIU_OSC_TEST_SEL1", "IF_XPHY_LS_HS_RIU_OSC_TEST_SEL1"),
    ("RIU_OSC_TEST_SEL2", "IF_XPHY_LS_HS_RIU_OSC_TEST_SEL2"),
    (
        "RIU_TX_DATA_PHASE8",
        "IF_XPHY_LS_HS_RIU_NIBBLE_CTRL1_TX_OUT_PHASE_90_REFCLK",
    ),
    (
        "RIU_TX_DATA_PHASE9",
        "IF_XPHY_LS_HS_RIU_NIBBLE_CTRL1_TX_OUT_PHASE_90_REFDATA",
    ),
    ("RST_GATED_TRI", "IF_XPHY_LS_HS_RST_GATED_TRI"),
    ("RX_DDR_EN_DQS", "IF_XPHY_LS_HS_LCT_RX_DDR_EN_DQS"),
    ("SCAN_CLK_DIV2", "IF_XPHY_LS_HS_SCAN_CLK_DIV2"),
    ("SCAN_CLK_DIV4", "IF_XPHY_LS_HS_SCAN_CLK_DIV4"),
    ("SCAN_CLK_SDR", "IF_XPHY_LS_HS_SCAN_CLK_SDR"),
    ("SCAN_EN", "IF_XPHY_LS_HS_SCAN_EN"),
    ("SCAN_MODE_B", "IF_XPHY_LS_HS_SCAN_MODE_B"),
    ("SCAN_MODE_STUCKAT", "IF_XPHY_LS_HS_SCAN_MODE_STUCKAT"),
    ("SCAN_RST_BYP_B", "IF_XPHY_LS_HS_SCAN_RST_BYP_B"),
    ("SCAN_RST_MASK_B", "IF_XPHY_LS_HS_SCAN_RST_MASK_B"),
    ("SP_SEL0", "IF_XPHY_LS_HS_SP_SEL0"),
    ("SP_SEL10", "IF_XPHY_LS_HS_SP_SEL10"),
    ("SP_SEL11", "IF_XPHY_LS_HS_SP_SEL11"),
    ("SP_SEL12", "IF_XPHY_LS_HS_SP_SEL12"),
    ("SP_SEL13", "IF_XPHY_LS_HS_SP_SEL13"),
    ("SP_SEL14", "IF_XPHY_LS_HS_SP_SEL14"),
    ("SP_SEL15", "IF_XPHY_LS_HS_SP_SEL15"),
    ("SP_SEL16", "IF_XPHY_LS_HS_SP_SEL16"),
    ("SP_SEL17", "IF_XPHY_LS_HS_SP_SEL17"),
    ("SP_SEL1", "IF_XPHY_LS_HS_SP_SEL1"),
    ("SP_SEL2", "IF_XPHY_LS_HS_SP_SEL2"),
    ("SP_SEL3", "IF_XPHY_LS_HS_SP_SEL3"),
    ("SP_SEL4", "IF_XPHY_LS_HS_SP_SEL4"),
    ("SP_SEL5", "IF_XPHY_LS_HS_SP_SEL5"),
    ("SP_SEL6", "IF_XPHY_LS_HS_SP_SEL6"),
    ("SP_SEL7", "IF_XPHY_LS_HS_SP_SEL7"),
    ("SP_SEL8", "IF_XPHY_LS_HS_SP_SEL8"),
    ("SP_SEL9", "IF_XPHY_LS_HS_SP_SEL9"),
    ("TEST_DIV2_CLK_SEL_B", "IF_XPHY_LS_HS_TEST_DIV2_CLK_SEL_B"),
    ("TEST_DIV4_CLK_SEL_B", "IF_XPHY_LS_HS_TEST_DIV4_CLK_SEL_B"),
    ("TEST_SDR_CLK_SEL_B", "IF_XPHY_LS_HS_TEST_SDR_CLK_SEL_B"),
    ("TX_D0", "IF_XPHY_LS_HS_TX_D0"),
    ("TX_D1", "IF_XPHY_LS_HS_TX_D1"),
    ("TX_D2", "IF_XPHY_LS_HS_TX_D2"),
    ("TX_D3", "IF_XPHY_LS_HS_TX_D3"),
    ("TX_D4", "IF_XPHY_LS_HS_TX_D4"),
    ("TX_D5", "IF_XPHY_LS_HS_TX_D5"),
    (
        "XMC_CONTROL_CTL_EN_CLK_TO_EXT_NORTH",
        "IF_XPHY_LS_HS_XMC_CONTROL_CTL_EN_CLK_TO_EXT_EAST",
    ),
    (
        "XMC_CONTROL_CTL_EN_CLK_TO_EXT_SOUTH",
        "IF_XPHY_LS_HS_XMC_CONTROL_CTL_EN_CLK_TO_EXT_WEST",
    ),
    (
        "XMC_CONTROL_DQSGATE_SRC_MUX0",
        "IF_XPHY_LS_HS_XMC_CONTROL_DQSGATE_SRC_MUX0",
    ),
    (
        "XMC_CONTROL_DQSGATE_SRC_MUX1",
        "IF_XPHY_LS_HS_XMC_CONTROL_DQSGATE_SRC_MUX1",
    ),
    ("XMC_CONTROL_FDLY0", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_CONTROL_FDLY1", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_CONTROL_FDLY2", "IF_XPHY_LS_HS_XMC_FDLY2"),
    (
        "XMC_CONTROL_MASTER_SRC_MUX0",
        "IF_XPHY_LS_HS_XMC_CONTROL_MASTER_SRC_MUX0",
    ),
    (
        "XMC_CONTROL_MASTER_SRC_MUX1",
        "IF_XPHY_LS_HS_XMC_CONTROL_MASTER_SRC_MUX1",
    ),
    (
        "XMC_CONTROL_NQTR_SRC_MUX0",
        "IF_XPHY_LS_HS_XMC_CONTROL_NQTR_SRC_MUX0",
    ),
    (
        "XMC_CONTROL_NQTR_SRC_MUX1",
        "IF_XPHY_LS_HS_XMC_CONTROL_NQTR_SRC_MUX1",
    ),
    (
        "XMC_CONTROL_PQTR_SRC_MUX0",
        "IF_XPHY_LS_HS_XMC_CONTROL_PQTR_SRC_MUX0",
    ),
    (
        "XMC_CONTROL_PQTR_SRC_MUX1",
        "IF_XPHY_LS_HS_XMC_CONTROL_PQTR_SRC_MUX1",
    ),
    (
        "XMC_DQSGATE_CASCADE_MUX",
        "IF_XPHY_LS_HS_XMC_DQSGATE_CASCADE_MUX",
    ),
    ("XMC_FAST_CK", "IF_XPHY_LS_HS_XMC_FAST_CK"),
    (
        "XMC_IDELAY_CASCADE_MUX0",
        "IF_XPHY_LS_HS_XMC_IDELAY_CASCADE_MUX0",
    ),
    (
        "XMC_IDELAY_CASCADE_MUX1",
        "IF_XPHY_LS_HS_XMC_IDELAY_CASCADE_MUX1",
    ),
    (
        "XMC_IDELAY_CASCADE_MUX2",
        "IF_XPHY_LS_HS_XMC_IDELAY_CASCADE_MUX2",
    ),
    (
        "XMC_IDELAY_CASCADE_MUX3",
        "IF_XPHY_LS_HS_XMC_IDELAY_CASCADE_MUX3",
    ),
    (
        "XMC_IDELAY_CASCADE_MUX4",
        "IF_XPHY_LS_HS_XMC_IDELAY_CASCADE_MUX4",
    ),
    (
        "XMC_IDELAY_CASCADE_MUX5",
        "IF_XPHY_LS_HS_XMC_IDELAY_CASCADE_MUX5",
    ),
    ("XMC_IDELAY_FDLY0", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_IDELAY_FDLY10", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_IDELAY_FDLY11", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_IDELAY_FDLY12", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_IDELAY_FDLY13", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_IDELAY_FDLY14", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_IDELAY_FDLY15", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_IDELAY_FDLY16", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_IDELAY_FDLY17", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_IDELAY_FDLY1", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_IDELAY_FDLY2", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_IDELAY_FDLY3", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_IDELAY_FDLY4", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_IDELAY_FDLY5", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_IDELAY_FDLY6", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_IDELAY_FDLY7", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_IDELAY_FDLY8", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_IDELAY_FDLY9", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_IDELAY_SRC_MUX0", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX0"),
    ("XMC_IDELAY_SRC_MUX10", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX10"),
    ("XMC_IDELAY_SRC_MUX11", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX11"),
    ("XMC_IDELAY_SRC_MUX1", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX1"),
    ("XMC_IDELAY_SRC_MUX2", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX2"),
    ("XMC_IDELAY_SRC_MUX3", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX3"),
    ("XMC_IDELAY_SRC_MUX4", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX4"),
    ("XMC_IDELAY_SRC_MUX5", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX5"),
    ("XMC_IDELAY_SRC_MUX6", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX6"),
    ("XMC_IDELAY_SRC_MUX7", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX7"),
    ("XMC_IDELAY_SRC_MUX8", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX8"),
    ("XMC_IDELAY_SRC_MUX9", "IF_XPHY_LS_HS_XMC_IDELAY_SRC_MUX9"),
    (
        "XMC_ISERDES_RX_DATA_WIDTH0",
        "IF_XPHY_LS_HS_XMC_ISERDES_RX_DATA_WIDTH0",
    ),
    (
        "XMC_ISERDES_RX_DATA_WIDTH1",
        "IF_XPHY_LS_HS_XMC_ISERDES_RX_DATA_WIDTH1",
    ),
    (
        "XMC_MASTER_CASCADE_MUX",
        "IF_XPHY_LS_HS_XMC_MASTER_CASCADE_MUX",
    ),
    ("XMC_NQTR_CASCADE_MUX", "IF_XPHY_LS_HS_XMC_NQTR_CASCADE_MUX"),
    (
        "XMC_ODELAY_CASCADE_MUX0",
        "IF_XPHY_LS_HS_XMC_ODELAY_CASCADE_MUX0",
    ),
    (
        "XMC_ODELAY_CASCADE_MUX1",
        "IF_XPHY_LS_HS_XMC_ODELAY_CASCADE_MUX1",
    ),
    (
        "XMC_ODELAY_CASCADE_MUX2",
        "IF_XPHY_LS_HS_XMC_ODELAY_CASCADE_MUX2",
    ),
    (
        "XMC_ODELAY_CASCADE_MUX3",
        "IF_XPHY_LS_HS_XMC_ODELAY_CASCADE_MUX3",
    ),
    (
        "XMC_ODELAY_CASCADE_MUX4",
        "IF_XPHY_LS_HS_XMC_ODELAY_CASCADE_MUX4",
    ),
    (
        "XMC_ODELAY_CASCADE_MUX5",
        "IF_XPHY_LS_HS_XMC_ODELAY_CASCADE_MUX5",
    ),
    (
        "XMC_ODELAY_CASCADE_MUX6",
        "IF_XPHY_LS_HS_XMC_ODELAY_CASCADE_MUX6",
    ),
    ("XMC_ODELAY_FDLY0", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_ODELAY_FDLY10", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_ODELAY_FDLY11", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_ODELAY_FDLY12", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_ODELAY_FDLY13", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_ODELAY_FDLY14", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_ODELAY_FDLY15", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_ODELAY_FDLY16", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_ODELAY_FDLY17", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_ODELAY_FDLY18", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_ODELAY_FDLY19", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_ODELAY_FDLY1", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_ODELAY_FDLY20", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_ODELAY_FDLY2", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_ODELAY_FDLY3", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_ODELAY_FDLY4", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_ODELAY_FDLY5", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_ODELAY_FDLY6", "IF_XPHY_LS_HS_XMC_FDLY0"),
    ("XMC_ODELAY_FDLY7", "IF_XPHY_LS_HS_XMC_FDLY1"),
    ("XMC_ODELAY_FDLY8", "IF_XPHY_LS_HS_XMC_FDLY2"),
    ("XMC_ODELAY_FDLY9", "IF_XPHY_LS_HS_XMC_FDLY0"),
    (
        "XMC_ODELAY_NATIVE_DELAY_BYPASS0",
        "IF_XPHY_LS_HS_RIU_ODELAY_BYPASS0",
    ),
    (
        "XMC_ODELAY_NATIVE_DELAY_BYPASS1",
        "IF_XPHY_LS_HS_RIU_ODELAY_BYPASS1",
    ),
    (
        "XMC_ODELAY_NATIVE_DELAY_BYPASS2",
        "IF_XPHY_LS_HS_RIU_ODELAY_BYPASS2",
    ),
    (
        "XMC_ODELAY_NATIVE_DELAY_BYPASS3",
        "IF_XPHY_LS_HS_RIU_ODELAY_BYPASS3",
    ),
    (
        "XMC_ODELAY_NATIVE_DELAY_BYPASS4",
        "IF_XPHY_LS_HS_RIU_ODELAY_BYPASS4",
    ),
    (
        "XMC_ODELAY_NATIVE_DELAY_BYPASS5",
        "IF_XPHY_LS_HS_RIU_ODELAY_BYPASS5",
    ),
    ("XMC_ODELAY_SRC_MUX0", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX0"),
    ("XMC_ODELAY_SRC_MUX10", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX10"),
    ("XMC_ODELAY_SRC_MUX11", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX11"),
    ("XMC_ODELAY_SRC_MUX12", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX12"),
    ("XMC_ODELAY_SRC_MUX13", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX13"),
    ("XMC_ODELAY_SRC_MUX1", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX1"),
    ("XMC_ODELAY_SRC_MUX2", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX2"),
    ("XMC_ODELAY_SRC_MUX3", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX3"),
    ("XMC_ODELAY_SRC_MUX4", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX4"),
    ("XMC_ODELAY_SRC_MUX5", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX5"),
    ("XMC_ODELAY_SRC_MUX6", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX6"),
    ("XMC_ODELAY_SRC_MUX7", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX7"),
    ("XMC_ODELAY_SRC_MUX8", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX8"),
    ("XMC_ODELAY_SRC_MUX9", "IF_XPHY_LS_HS_XMC_ODELAY_SRC_MUX9"),
    (
        "XMC_OSERDES_TX_INIT_OQ0",
        "IF_XPHY_LS_HS_XMC_OSERDES_TX_INIT_OQ0",
    ),
    (
        "XMC_OSERDES_TX_INIT_OQ1",
        "IF_XPHY_LS_HS_XMC_OSERDES_TX_INIT_OQ1",
    ),
    (
        "XMC_OSERDES_TX_INIT_OQ2",
        "IF_XPHY_LS_HS_XMC_OSERDES_TX_INIT_OQ2",
    ),
    (
        "XMC_OSERDES_TX_INIT_OQ3",
        "IF_XPHY_LS_HS_XMC_OSERDES_TX_INIT_OQ3",
    ),
    (
        "XMC_OSERDES_TX_INIT_OQ4",
        "IF_XPHY_LS_HS_XMC_OSERDES_TX_INIT_OQ4",
    ),
    (
        "XMC_OSERDES_TX_INIT_OQ5",
        "IF_XPHY_LS_HS_XMC_OSERDES_TX_INIT_OQ5",
    ),
    (
        "XMC_OSERDES_TX_INIT_OQ6",
        "IF_XPHY_LS_HS_XMC_OSERDES_TX_INIT_OT",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_1_0",
        "IF_XPHY_LS_HS_TBYTE_CTL_COND0",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_1_1",
        "IF_XPHY_LS_HS_TBYTE_CTL_COND1",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_1_2",
        "IF_XPHY_LS_HS_TBYTE_CTL_COND2",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_1_3",
        "IF_XPHY_LS_HS_TBYTE_CTL_COND3",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_1_4",
        "IF_XPHY_LS_HS_TBYTE_CTL_COND4",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_1_5",
        "IF_XPHY_LS_HS_TBYTE_CTL_COND5",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_5_0",
        "IF_XPHY_LS_HS_ROUTETHRU_COND0",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_5_1",
        "IF_XPHY_LS_HS_ROUTETHRU_COND1",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_5_2",
        "IF_XPHY_LS_HS_ROUTETHRU_COND2",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_5_3",
        "IF_XPHY_LS_HS_ROUTETHRU_COND3",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_5_4",
        "IF_XPHY_LS_HS_ROUTETHRU_COND4",
    ),
    (
        "XMC_OSERDES_TX_OSER_MUX_SEL_5_5",
        "IF_XPHY_LS_HS_ROUTETHRU_COND5",
    ),
    ("XMC_PQTR_CASCADE_MUX", "IF_XPHY_LS_HS_XMC_PQTR_CASCADE_MUX"),
    (
        "XMC_RXTX_BITSLICE_TXRX_LOOPBACK_SEL0",
        "IF_XPHY_LS_HS_RIU_TXRX_LOOPBACK_0",
    ),
    (
        "XMC_RXTX_BITSLICE_TXRX_LOOPBACK_SEL1",
        "IF_XPHY_LS_HS_RIU_TXRX_LOOPBACK_1",
    ),
    (
        "XMC_RXTX_BITSLICE_TXRX_LOOPBACK_SEL2",
        "IF_XPHY_LS_HS_RIU_TXRX_LOOPBACK_2",
    ),
    (
        "XMC_RXTX_BITSLICE_TXRX_LOOPBACK_SEL3",
        "IF_XPHY_LS_HS_RIU_TXRX_LOOPBACK_3",
    ),
    (
        "XMC_RXTX_BITSLICE_TXRX_LOOPBACK_SEL4",
        "IF_XPHY_LS_HS_RIU_TXRX_LOOPBACK_4",
    ),
    (
        "XMC_RXTX_BITSLICE_TXRX_LOOPBACK_SEL5",
        "IF_XPHY_LS_HS_RIU_TXRX_LOOPBACK_5",
    ),
    ("XMC_TX_BYPASS1_0", "IF_XPHY_LS_HS_TX_BYPASS1_0"),
    ("XMC_TX_BYPASS1_1", "IF_XPHY_LS_HS_TX_BYPASS1_1"),
    ("XMC_TX_BYPASS1_2", "IF_XPHY_LS_HS_TX_BYPASS1_2"),
    ("XMC_TX_BYPASS1_3", "IF_XPHY_LS_HS_TX_BYPASS1_3"),
    ("XMC_TX_BYPASS1_4", "IF_XPHY_LS_HS_TX_BYPASS1_4"),
    ("XMC_TX_BYPASS1_5", "IF_XPHY_LS_HS_TX_BYPASS1_5"),
    ("XMC_TX_DATA_WIDTH", "IF_XPHY_LS_HS_XMC_TX_DATA_WIDTH_0"),
    ("XMC_TX_LP4_DQS", "IF_XPHY_LS_HS_XMC_TX_LP4_DQS"),
    ("XMUX_CTRL0", "IF_XPHY_LS_HS_XMUX_CTRL0"),
    ("XMUX_CTRL10", "IF_XPHY_LS_HS_XMUX_CTRL10"),
    ("XMUX_CTRL11", "IF_XPHY_LS_HS_XMUX_CTRL11"),
    ("XMUX_CTRL12", "IF_XPHY_LS_HS_XMUX_CTRL12"),
    ("XMUX_CTRL13", "IF_XPHY_LS_HS_XMUX_CTRL13"),
    ("XMUX_CTRL14", "IF_XPHY_LS_HS_XMUX_CTRL14"),
    ("XMUX_CTRL15", "IF_XPHY_LS_HS_XMUX_CTRL15"),
    ("XMUX_CTRL16", "IF_XPHY_LS_HS_XMUX_CTRL16"),
    ("XMUX_CTRL17", "IF_XPHY_LS_HS_XMUX_CTRL17"),
    ("XMUX_CTRL18", "IF_XPHY_LS_HS_TRI_XMUX_CTRL0"),
    ("XMUX_CTRL19", "IF_XPHY_LS_HS_TRI_XMUX_CTRL1"),
    ("XMUX_CTRL1", "IF_XPHY_LS_HS_XMUX_CTRL1"),
    ("XMUX_CTRL20", "IF_XPHY_LS_HS_TRI_XMUX_CTRL2"),
    ("XMUX_CTRL2", "IF_XPHY_LS_HS_XMUX_CTRL2"),
    ("XMUX_CTRL3", "IF_XPHY_LS_HS_XMUX_CTRL3"),
    ("XMUX_CTRL4", "IF_XPHY_LS_HS_XMUX_CTRL4"),
    ("XMUX_CTRL5", "IF_XPHY_LS_HS_XMUX_CTRL5"),
    ("XMUX_CTRL6", "IF_XPHY_LS_HS_XMUX_CTRL6"),
    ("XMUX_CTRL7", "IF_XPHY_LS_HS_XMUX_CTRL7"),
    ("XMUX_CTRL8", "IF_XPHY_LS_HS_XMUX_CTRL8"),
    ("XMUX_CTRL9", "IF_XPHY_LS_HS_XMUX_CTRL9"),
];

pub const X5PHY_LS_FROM_HS: &[(&str, &str)] = &[
    (
        "IF_XPHY_LS_HS_HCG_RX_CG_SUB90_DLY_CLK",
        "HCG_RX_CG_SUB90_DLY_CLK",
    ),
    ("IF_XPHY_LS_HS_HCG_RX_DIV2_CLK_BUF", "HCG_RX_DIV2_CLK_BUF"),
    ("IF_XPHY_LS_HS_HCG_RX_DIV2_CLK", "HCG_RX_DIV2_CLK"),
    ("IF_XPHY_LS_HS_HCG_RX_SDR_CLK_BUF", "HCG_RX_SDR_CLK_BUF"),
    (
        "IF_XPHY_LS_HS_HCG_RX_SUB90_DLY_CLK_SMX",
        "HCG_RX_SUB90_DLY_CLK_SMX",
    ),
    ("IF_XPHY_LS_HS_HCG_TX_DIV2_CLK_BUF", "HCG_TX_DIV2_CLK_BUF"),
    ("IF_XPHY_LS_HS_HCG_TX_DIV2_CLK", "HCG_TX_DIV2_CLK"),
    ("IF_XPHY_LS_HS_HCG_TX_SDR_CLK_BUF", "HCG_TX_SDR_CLK_BUF"),
    ("IF_XPHY_LS_HS_HCG_TX_SDR_CLK", "HCG_TX_SDR_CLK"),
    ("IF_XPHY_LS_HS_HCG_TX_SUB90_DLY_CLK", "HCG_TX_SUB90_DLY_CLK"),
    (
        "IF_XPHY_LS_HS_HCG_TX_SUB90_DLY_CLK_SMX",
        "HCG_TX_SUB90_DLY_CLK_SMX",
    ),
    ("IF_XPHY_LS_HS_HCT_GT_STATUS0", "HCT_GT_STATUS0"),
    ("IF_XPHY_LS_HS_HCT_GT_STATUS1", "HCT_GT_STATUS1"),
    ("IF_XPHY_LS_HS_HCT_GT_STATUS2", "HCT_GT_STATUS2"),
    ("IF_XPHY_LS_HS_HCT_GT_STATUS3", "HCT_GT_STATUS3"),
    ("IF_XPHY_LS_HS_HCT_GT_STATUS4", "HCT_GT_STATUS4"),
    ("IF_XPHY_LS_HS_HCT_GT_STATUS5", "HCT_GT_STATUS5"),
    ("IF_XPHY_LS_HS_HCT_GT_STATUS_ACK", "HCT_GT_STATUS_ACK"),
    ("IF_XPHY_LS_HS_HCT_MASTER_PD2S_OUT0", "HCT_MASTER_PD2S_OUT0"),
    ("IF_XPHY_LS_HS_HCT_MASTER_PD2S_OUT1", "HCT_MASTER_PD2S_OUT1"),
    (
        "IF_XPHY_LS_HS_HCT_MASTER_PD2S_OUT_CLK",
        "HCT_MASTER_PD2S_OUT_CLK",
    ),
    ("IF_XPHY_LS_HS_HCT_MASTER_PD_OUT", "HCT_MASTER_PD_OUT"),
    ("IF_XPHY_LS_HS_HCT_REFCLK_EN_MUXED", "HCT_REFCLK_EN_MUXED"),
    ("IF_XPHY_LS_HS_HRT_DIV2_SDR_CLK0", "HRT_DIV2_SDR_CLK0"),
    ("IF_XPHY_LS_HS_HRT_DIV2_SDR_CLK1", "HRT_DIV2_SDR_CLK1"),
    ("IF_XPHY_LS_HS_HRT_DIV2_SDR_CLK2", "HRT_DIV2_SDR_CLK2"),
    ("IF_XPHY_LS_HS_HRT_DIV2_SDR_CLK3", "HRT_DIV2_SDR_CLK3"),
    ("IF_XPHY_LS_HS_HRT_DIV2_SDR_CLK4", "HRT_DIV2_SDR_CLK4"),
    ("IF_XPHY_LS_HS_HRT_DIV2_SDR_CLK5", "HRT_DIV2_SDR_CLK5"),
    ("IF_XPHY_LS_HS_HRT_N0_DIV2_0", "HRT_N0_DIV2_0"),
    ("IF_XPHY_LS_HS_HRT_N0_DIV2_1", "HRT_N0_DIV2_1"),
    ("IF_XPHY_LS_HS_HRT_N0_DIV2_2", "HRT_N0_DIV2_2"),
    ("IF_XPHY_LS_HS_HRT_N0_DIV2_3", "HRT_N0_DIV2_3"),
    ("IF_XPHY_LS_HS_HRT_N0_DIV2_4", "HRT_N0_DIV2_4"),
    ("IF_XPHY_LS_HS_HRT_N0_DIV2_5", "HRT_N0_DIV2_5"),
    ("IF_XPHY_LS_HS_HRT_N1_DIV2_0", "HRT_N1_DIV2_0"),
    ("IF_XPHY_LS_HS_HRT_N1_DIV2_1", "HRT_N1_DIV2_1"),
    ("IF_XPHY_LS_HS_HRT_N1_DIV2_2", "HRT_N1_DIV2_2"),
    ("IF_XPHY_LS_HS_HRT_N1_DIV2_3", "HRT_N1_DIV2_3"),
    ("IF_XPHY_LS_HS_HRT_N1_DIV2_4", "HRT_N1_DIV2_4"),
    ("IF_XPHY_LS_HS_HRT_N1_DIV2_5", "HRT_N1_DIV2_5"),
    ("IF_XPHY_LS_HS_HRT_P0_DIV2_0", "HRT_P0_DIV2_0"),
    ("IF_XPHY_LS_HS_HRT_P0_DIV2_1", "HRT_P0_DIV2_1"),
    ("IF_XPHY_LS_HS_HRT_P0_DIV2_2", "HRT_P0_DIV2_2"),
    ("IF_XPHY_LS_HS_HRT_P0_DIV2_3", "HRT_P0_DIV2_3"),
    ("IF_XPHY_LS_HS_HRT_P0_DIV2_4", "HRT_P0_DIV2_4"),
    ("IF_XPHY_LS_HS_HRT_P0_DIV2_5", "HRT_P0_DIV2_5"),
    ("IF_XPHY_LS_HS_HRT_P1_DIV2_0", "HRT_P1_DIV2_0"),
    ("IF_XPHY_LS_HS_HRT_P1_DIV2_1", "HRT_P1_DIV2_1"),
    ("IF_XPHY_LS_HS_HRT_P1_DIV2_2", "HRT_P1_DIV2_2"),
    ("IF_XPHY_LS_HS_HRT_P1_DIV2_3", "HRT_P1_DIV2_3"),
    ("IF_XPHY_LS_HS_HRT_P1_DIV2_4", "HRT_P1_DIV2_4"),
    ("IF_XPHY_LS_HS_HRT_P1_DIV2_5", "HRT_P1_DIV2_5"),
    ("IF_XPHY_LS_HS_HRT_PN_SEL_2TO1_0", "HRT_PN_SEL_2TO1_0"),
    ("IF_XPHY_LS_HS_HRT_PN_SEL_2TO1_1", "HRT_PN_SEL_2TO1_1"),
    ("IF_XPHY_LS_HS_HRT_PN_SEL_2TO1_2", "HRT_PN_SEL_2TO1_2"),
    ("IF_XPHY_LS_HS_HRT_PN_SEL_2TO1_3", "HRT_PN_SEL_2TO1_3"),
    ("IF_XPHY_LS_HS_HRT_PN_SEL_2TO1_4", "HRT_PN_SEL_2TO1_4"),
    ("IF_XPHY_LS_HS_HRT_PN_SEL_2TO1_5", "HRT_PN_SEL_2TO1_5"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q4_0", "HRT_ROUTETHRU_Q4_0"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q4_1", "HRT_ROUTETHRU_Q4_1"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q4_2", "HRT_ROUTETHRU_Q4_2"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q4_3", "HRT_ROUTETHRU_Q4_3"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q4_4", "HRT_ROUTETHRU_Q4_4"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q4_5", "HRT_ROUTETHRU_Q4_5"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q5_0", "HRT_ROUTETHRU_Q5_0"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q5_1", "HRT_ROUTETHRU_Q5_1"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q5_2", "HRT_ROUTETHRU_Q5_2"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q5_3", "HRT_ROUTETHRU_Q5_3"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q5_4", "HRT_ROUTETHRU_Q5_4"),
    ("IF_XPHY_LS_HS_HRT_ROUTETHRU_Q5_5", "HRT_ROUTETHRU_Q5_5"),
    ("IF_XPHY_LS_HS_HTR_PN_SEL_2TO1", "HTR_PN_SEL_2TO1"),
    ("IF_XPHY_LS_HS_OSC_TEST_CLK", "OSC_TEST_CLK"),
];

pub const X5PHY_LS_FROM_LPDDRMC_CLB2PHY: &[&str] = &[
    "CLB2PHY_CTRL_CLK",
    "CLB2PHY_DLYCTL_EN_VTC",
    "CLB2PHY_DYNAMIC_DCI_TS0",
    "CLB2PHY_DYNAMIC_DCI_TS1",
    "CLB2PHY_DYNAMIC_DCI_TS2",
    "CLB2PHY_DYNAMIC_DCI_TS3",
    "CLB2PHY_DYNAMIC_DCI_TS4",
    "CLB2PHY_DYNAMIC_DCI_TS5",
    "CLB2PHY_FIFO_CLK",
    "CLB2PHY_FIFO_RDEN",
    "CLB2PHY_IBUF_DISABLE0",
    "CLB2PHY_IBUF_DISABLE1",
    "CLB2PHY_IBUF_DISABLE2",
    "CLB2PHY_IBUF_DISABLE3",
    "CLB2PHY_IBUF_DISABLE4",
    "CLB2PHY_IBUF_DISABLE5",
    "CLB2PHY_IDELAY_EN_VTC0",
    "CLB2PHY_IDELAY_EN_VTC1",
    "CLB2PHY_IDELAY_EN_VTC2",
    "CLB2PHY_IDELAY_EN_VTC3",
    "CLB2PHY_IDELAY_EN_VTC4",
    "CLB2PHY_IDELAY_EN_VTC5",
    "CLB2PHY_IODELAY_CE0",
    "CLB2PHY_IODELAY_CE1",
    "CLB2PHY_IODELAY_CE2",
    "CLB2PHY_IODELAY_CE3",
    "CLB2PHY_IODELAY_CE4",
    "CLB2PHY_IODELAY_CE5",
    "CLB2PHY_IODELAY_CNTVALUEIN0",
    "CLB2PHY_IODELAY_CNTVALUEIN10",
    "CLB2PHY_IODELAY_CNTVALUEIN11",
    "CLB2PHY_IODELAY_CNTVALUEIN12",
    "CLB2PHY_IODELAY_CNTVALUEIN13",
    "CLB2PHY_IODELAY_CNTVALUEIN14",
    "CLB2PHY_IODELAY_CNTVALUEIN15",
    "CLB2PHY_IODELAY_CNTVALUEIN16",
    "CLB2PHY_IODELAY_CNTVALUEIN17",
    "CLB2PHY_IODELAY_CNTVALUEIN18",
    "CLB2PHY_IODELAY_CNTVALUEIN19",
    "CLB2PHY_IODELAY_CNTVALUEIN1",
    "CLB2PHY_IODELAY_CNTVALUEIN20",
    "CLB2PHY_IODELAY_CNTVALUEIN21",
    "CLB2PHY_IODELAY_CNTVALUEIN22",
    "CLB2PHY_IODELAY_CNTVALUEIN23",
    "CLB2PHY_IODELAY_CNTVALUEIN24",
    "CLB2PHY_IODELAY_CNTVALUEIN25",
    "CLB2PHY_IODELAY_CNTVALUEIN26",
    "CLB2PHY_IODELAY_CNTVALUEIN27",
    "CLB2PHY_IODELAY_CNTVALUEIN28",
    "CLB2PHY_IODELAY_CNTVALUEIN29",
    "CLB2PHY_IODELAY_CNTVALUEIN2",
    "CLB2PHY_IODELAY_CNTVALUEIN30",
    "CLB2PHY_IODELAY_CNTVALUEIN31",
    "CLB2PHY_IODELAY_CNTVALUEIN32",
    "CLB2PHY_IODELAY_CNTVALUEIN33",
    "CLB2PHY_IODELAY_CNTVALUEIN34",
    "CLB2PHY_IODELAY_CNTVALUEIN35",
    "CLB2PHY_IODELAY_CNTVALUEIN36",
    "CLB2PHY_IODELAY_CNTVALUEIN37",
    "CLB2PHY_IODELAY_CNTVALUEIN38",
    "CLB2PHY_IODELAY_CNTVALUEIN39",
    "CLB2PHY_IODELAY_CNTVALUEIN3",
    "CLB2PHY_IODELAY_CNTVALUEIN40",
    "CLB2PHY_IODELAY_CNTVALUEIN41",
    "CLB2PHY_IODELAY_CNTVALUEIN42",
    "CLB2PHY_IODELAY_CNTVALUEIN43",
    "CLB2PHY_IODELAY_CNTVALUEIN44",
    "CLB2PHY_IODELAY_CNTVALUEIN45",
    "CLB2PHY_IODELAY_CNTVALUEIN46",
    "CLB2PHY_IODELAY_CNTVALUEIN47",
    "CLB2PHY_IODELAY_CNTVALUEIN48",
    "CLB2PHY_IODELAY_CNTVALUEIN49",
    "CLB2PHY_IODELAY_CNTVALUEIN4",
    "CLB2PHY_IODELAY_CNTVALUEIN50",
    "CLB2PHY_IODELAY_CNTVALUEIN51",
    "CLB2PHY_IODELAY_CNTVALUEIN52",
    "CLB2PHY_IODELAY_CNTVALUEIN53",
    "CLB2PHY_IODELAY_CNTVALUEIN5",
    "CLB2PHY_IODELAY_CNTVALUEIN6",
    "CLB2PHY_IODELAY_CNTVALUEIN7",
    "CLB2PHY_IODELAY_CNTVALUEIN8",
    "CLB2PHY_IODELAY_CNTVALUEIN9",
    "CLB2PHY_IODELAY_INC0",
    "CLB2PHY_IODELAY_INC1",
    "CLB2PHY_IODELAY_INC2",
    "CLB2PHY_IODELAY_INC3",
    "CLB2PHY_IODELAY_INC4",
    "CLB2PHY_IODELAY_INC5",
    "CLB2PHY_IODELAY_LD0",
    "CLB2PHY_IODELAY_LD1",
    "CLB2PHY_IODELAY_LD2",
    "CLB2PHY_IODELAY_LD3",
    "CLB2PHY_IODELAY_LD4",
    "CLB2PHY_IODELAY_LD5",
    "CLB2PHY_IODELAY_SEL0",
    "CLB2PHY_IODELAY_SEL1",
    "CLB2PHY_IODELAY_SEL2",
    "CLB2PHY_IODELAY_SEL3",
    "CLB2PHY_IODELAY_SEL4",
    "CLB2PHY_IODELAY_SEL5",
    "CLB2PHY_KEEPER_EN0",
    "CLB2PHY_KEEPER_EN1",
    "CLB2PHY_KEEPER_EN2",
    "CLB2PHY_KEEPER_EN3",
    "CLB2PHY_KEEPER_EN4",
    "CLB2PHY_KEEPER_EN5",
    "CLB2PHY_LP_RX_DIS_OR_TERM_EN0",
    "CLB2PHY_LP_RX_DIS_OR_TERM_EN1",
    "CLB2PHY_LP_RX_DIS_OR_TERM_EN2",
    "CLB2PHY_LP_TX_O_OR_PU_EN_0_0",
    "CLB2PHY_LP_TX_O_OR_PU_EN_0_1",
    "CLB2PHY_LP_TX_O_OR_PU_EN_0_2",
    "CLB2PHY_LP_TX_O_OR_PU_EN_1_0",
    "CLB2PHY_LP_TX_O_OR_PU_EN_1_1",
    "CLB2PHY_LP_TX_O_OR_PU_EN_1_2",
    "CLB2PHY_LP_TX_T_OR_PD_EN_0_0",
    "CLB2PHY_LP_TX_T_OR_PD_EN_0_1",
    "CLB2PHY_LP_TX_T_OR_PD_EN_0_2",
    "CLB2PHY_ODELAY_EN_VTC0",
    "CLB2PHY_ODELAY_EN_VTC1",
    "CLB2PHY_ODELAY_EN_VTC2",
    "CLB2PHY_ODELAY_EN_VTC3",
    "CLB2PHY_ODELAY_EN_VTC4",
    "CLB2PHY_ODELAY_EN_VTC5",
    "CLB2PHY_PD_EN_1_0",
    "CLB2PHY_PD_EN_1_1",
    "CLB2PHY_PD_EN_1_2",
    "CLB2PHY_RDEN0",
    "CLB2PHY_RDEN1",
    "CLB2PHY_RDEN2",
    "CLB2PHY_RDEN3",
    "CLB2PHY_RST",
    "CLB2PHY_RXBIT_RST0",
    "CLB2PHY_RXBIT_RST1",
    "CLB2PHY_RXBIT_RST2",
    "CLB2PHY_RXBIT_RST3",
    "CLB2PHY_RXBIT_RST4",
    "CLB2PHY_RXBIT_RST5",
    "CLB2PHY_TXBIT_RST0",
    "CLB2PHY_TXBIT_RST1",
    "CLB2PHY_TXBIT_RST2",
    "CLB2PHY_TXBIT_RST3",
    "CLB2PHY_TXBIT_RST4",
    "CLB2PHY_TXBIT_RST5",
    "CLB2PHY_T_TXBIT0",
    "CLB2PHY_T_TXBIT1",
    "CLB2PHY_T_TXBIT2",
    "CLB2PHY_T_TXBIT3",
    "CLB2PHY_T_TXBIT4",
    "CLB2PHY_T_TXBIT5",
    "CLB2PHY_WREN0",
    "CLB2PHY_WREN1",
    "CLB2PHY_WREN2",
    "CLB2PHY_WREN3",
    "CLB2PHY_WR_DQ0_0",
    "CLB2PHY_WR_DQ0_1",
    "CLB2PHY_WR_DQ0_2",
    "CLB2PHY_WR_DQ0_3",
    "CLB2PHY_WR_DQ0_4",
    "CLB2PHY_WR_DQ0_5",
    "CLB2PHY_WR_DQ0_6",
    "CLB2PHY_WR_DQ0_7",
    "CLB2PHY_WR_DQ1_0",
    "CLB2PHY_WR_DQ1_1",
    "CLB2PHY_WR_DQ1_2",
    "CLB2PHY_WR_DQ1_3",
    "CLB2PHY_WR_DQ1_4",
    "CLB2PHY_WR_DQ1_5",
    "CLB2PHY_WR_DQ1_6",
    "CLB2PHY_WR_DQ1_7",
    "CLB2PHY_WR_DQ2_0",
    "CLB2PHY_WR_DQ2_1",
    "CLB2PHY_WR_DQ2_2",
    "CLB2PHY_WR_DQ2_3",
    "CLB2PHY_WR_DQ2_4",
    "CLB2PHY_WR_DQ2_5",
    "CLB2PHY_WR_DQ2_6",
    "CLB2PHY_WR_DQ2_7",
    "CLB2PHY_WR_DQ3_0",
    "CLB2PHY_WR_DQ3_1",
    "CLB2PHY_WR_DQ3_2",
    "CLB2PHY_WR_DQ3_3",
    "CLB2PHY_WR_DQ3_4",
    "CLB2PHY_WR_DQ3_5",
    "CLB2PHY_WR_DQ3_6",
    "CLB2PHY_WR_DQ3_7",
    "CLB2PHY_WR_DQ4_0",
    "CLB2PHY_WR_DQ4_1",
    "CLB2PHY_WR_DQ4_2",
    "CLB2PHY_WR_DQ4_3",
    "CLB2PHY_WR_DQ4_4",
    "CLB2PHY_WR_DQ4_5",
    "CLB2PHY_WR_DQ4_6",
    "CLB2PHY_WR_DQ4_7",
    "CLB2PHY_WR_DQ5_0",
    "CLB2PHY_WR_DQ5_1",
    "CLB2PHY_WR_DQ5_2",
    "CLB2PHY_WR_DQ5_3",
    "CLB2PHY_WR_DQ5_4",
    "CLB2PHY_WR_DQ5_5",
    "CLB2PHY_WR_DQ5_6",
    "CLB2PHY_WR_DQ5_7",
    "CLB2RIU_ADDR0",
    "CLB2RIU_ADDR1",
    "CLB2RIU_ADDR2",
    "CLB2RIU_ADDR3",
    "CLB2RIU_ADDR4",
    "CLB2RIU_ADDR5",
    "CLB2RIU_ADDR6",
    "CLB2RIU_ADDR7",
    "CLB2RIU_NIBBLE_SEL",
    "CLB2RIU_WR_DATA0",
    "CLB2RIU_WR_DATA10",
    "CLB2RIU_WR_DATA11",
    "CLB2RIU_WR_DATA12",
    "CLB2RIU_WR_DATA13",
    "CLB2RIU_WR_DATA14",
    "CLB2RIU_WR_DATA15",
    "CLB2RIU_WR_DATA1",
    "CLB2RIU_WR_DATA2",
    "CLB2RIU_WR_DATA3",
    "CLB2RIU_WR_DATA4",
    "CLB2RIU_WR_DATA5",
    "CLB2RIU_WR_DATA6",
    "CLB2RIU_WR_DATA7",
    "CLB2RIU_WR_DATA8",
    "CLB2RIU_WR_DATA9",
    "CLB2RIU_WR_EN",
];

pub const X5PHY_LPDDRMC_FROM_LS_CLB2PHY: &[&str] = &[
    "IOB2CLB_DFT0",
    "IOB2CLB_DFT1",
    "IOB2CLB_DFT2",
    "IOB2CLB_DFT3",
    "IOB2CLB_DFT4",
    "IOB2CLB_DFT5",
    "PHY2CLB_FIFO_EMPTY",
    "PHY2CLB_FIXDLY_RDY",
    "PHY2CLB_GT_STATUS",
    "PHY2CLB_IODELAY_CNTVALUEOUT0",
    "PHY2CLB_IODELAY_CNTVALUEOUT10",
    "PHY2CLB_IODELAY_CNTVALUEOUT11",
    "PHY2CLB_IODELAY_CNTVALUEOUT12",
    "PHY2CLB_IODELAY_CNTVALUEOUT13",
    "PHY2CLB_IODELAY_CNTVALUEOUT14",
    "PHY2CLB_IODELAY_CNTVALUEOUT15",
    "PHY2CLB_IODELAY_CNTVALUEOUT16",
    "PHY2CLB_IODELAY_CNTVALUEOUT17",
    "PHY2CLB_IODELAY_CNTVALUEOUT18",
    "PHY2CLB_IODELAY_CNTVALUEOUT19",
    "PHY2CLB_IODELAY_CNTVALUEOUT1",
    "PHY2CLB_IODELAY_CNTVALUEOUT20",
    "PHY2CLB_IODELAY_CNTVALUEOUT21",
    "PHY2CLB_IODELAY_CNTVALUEOUT22",
    "PHY2CLB_IODELAY_CNTVALUEOUT23",
    "PHY2CLB_IODELAY_CNTVALUEOUT24",
    "PHY2CLB_IODELAY_CNTVALUEOUT25",
    "PHY2CLB_IODELAY_CNTVALUEOUT26",
    "PHY2CLB_IODELAY_CNTVALUEOUT27",
    "PHY2CLB_IODELAY_CNTVALUEOUT28",
    "PHY2CLB_IODELAY_CNTVALUEOUT29",
    "PHY2CLB_IODELAY_CNTVALUEOUT2",
    "PHY2CLB_IODELAY_CNTVALUEOUT30",
    "PHY2CLB_IODELAY_CNTVALUEOUT31",
    "PHY2CLB_IODELAY_CNTVALUEOUT32",
    "PHY2CLB_IODELAY_CNTVALUEOUT33",
    "PHY2CLB_IODELAY_CNTVALUEOUT34",
    "PHY2CLB_IODELAY_CNTVALUEOUT35",
    "PHY2CLB_IODELAY_CNTVALUEOUT36",
    "PHY2CLB_IODELAY_CNTVALUEOUT37",
    "PHY2CLB_IODELAY_CNTVALUEOUT38",
    "PHY2CLB_IODELAY_CNTVALUEOUT39",
    "PHY2CLB_IODELAY_CNTVALUEOUT3",
    "PHY2CLB_IODELAY_CNTVALUEOUT40",
    "PHY2CLB_IODELAY_CNTVALUEOUT41",
    "PHY2CLB_IODELAY_CNTVALUEOUT42",
    "PHY2CLB_IODELAY_CNTVALUEOUT43",
    "PHY2CLB_IODELAY_CNTVALUEOUT44",
    "PHY2CLB_IODELAY_CNTVALUEOUT45",
    "PHY2CLB_IODELAY_CNTVALUEOUT46",
    "PHY2CLB_IODELAY_CNTVALUEOUT47",
    "PHY2CLB_IODELAY_CNTVALUEOUT48",
    "PHY2CLB_IODELAY_CNTVALUEOUT49",
    "PHY2CLB_IODELAY_CNTVALUEOUT4",
    "PHY2CLB_IODELAY_CNTVALUEOUT50",
    "PHY2CLB_IODELAY_CNTVALUEOUT51",
    "PHY2CLB_IODELAY_CNTVALUEOUT52",
    "PHY2CLB_IODELAY_CNTVALUEOUT53",
    "PHY2CLB_IODELAY_CNTVALUEOUT5",
    "PHY2CLB_IODELAY_CNTVALUEOUT6",
    "PHY2CLB_IODELAY_CNTVALUEOUT7",
    "PHY2CLB_IODELAY_CNTVALUEOUT8",
    "PHY2CLB_IODELAY_CNTVALUEOUT9",
    "PHY2CLB_LP_I_0_0",
    "PHY2CLB_LP_I_0_1",
    "PHY2CLB_LP_I_0_2",
    "PHY2CLB_LP_I_1_0",
    "PHY2CLB_LP_I_1_1",
    "PHY2CLB_LP_I_1_2",
    "PHY2CLB_MASTER_PD",
    "PHY2CLB_PHY_RDY",
    "PHY2CLB_RD_DQ0_0",
    "PHY2CLB_RD_DQ0_1",
    "PHY2CLB_RD_DQ0_2",
    "PHY2CLB_RD_DQ0_3",
    "PHY2CLB_RD_DQ0_4",
    "PHY2CLB_RD_DQ0_5",
    "PHY2CLB_RD_DQ0_6",
    "PHY2CLB_RD_DQ0_7",
    "PHY2CLB_RD_DQ1_0",
    "PHY2CLB_RD_DQ1_1",
    "PHY2CLB_RD_DQ1_2",
    "PHY2CLB_RD_DQ1_3",
    "PHY2CLB_RD_DQ1_4",
    "PHY2CLB_RD_DQ1_5",
    "PHY2CLB_RD_DQ1_6",
    "PHY2CLB_RD_DQ1_7",
    "PHY2CLB_RD_DQ2_0",
    "PHY2CLB_RD_DQ2_1",
    "PHY2CLB_RD_DQ2_2",
    "PHY2CLB_RD_DQ2_3",
    "PHY2CLB_RD_DQ2_4",
    "PHY2CLB_RD_DQ2_5",
    "PHY2CLB_RD_DQ2_6",
    "PHY2CLB_RD_DQ2_7",
    "PHY2CLB_RD_DQ3_0",
    "PHY2CLB_RD_DQ3_1",
    "PHY2CLB_RD_DQ3_2",
    "PHY2CLB_RD_DQ3_3",
    "PHY2CLB_RD_DQ3_4",
    "PHY2CLB_RD_DQ3_5",
    "PHY2CLB_RD_DQ3_6",
    "PHY2CLB_RD_DQ3_7",
    "PHY2CLB_RD_DQ4_0",
    "PHY2CLB_RD_DQ4_1",
    "PHY2CLB_RD_DQ4_2",
    "PHY2CLB_RD_DQ4_3",
    "PHY2CLB_RD_DQ4_4",
    "PHY2CLB_RD_DQ4_5",
    "PHY2CLB_RD_DQ4_6",
    "PHY2CLB_RD_DQ4_7",
    "PHY2CLB_RD_DQ5_0",
    "PHY2CLB_RD_DQ5_1",
    "PHY2CLB_RD_DQ5_2",
    "PHY2CLB_RD_DQ5_3",
    "PHY2CLB_RD_DQ5_4",
    "PHY2CLB_RD_DQ5_5",
    "PHY2CLB_RD_DQ5_6",
    "PHY2CLB_RD_DQ5_7",
    "RIU2CLB_RD_DATA0",
    "RIU2CLB_RD_DATA10",
    "RIU2CLB_RD_DATA11",
    "RIU2CLB_RD_DATA12",
    "RIU2CLB_RD_DATA13",
    "RIU2CLB_RD_DATA14",
    "RIU2CLB_RD_DATA15",
    "RIU2CLB_RD_DATA1",
    "RIU2CLB_RD_DATA2",
    "RIU2CLB_RD_DATA3",
    "RIU2CLB_RD_DATA4",
    "RIU2CLB_RD_DATA5",
    "RIU2CLB_RD_DATA6",
    "RIU2CLB_RD_DATA7",
    "RIU2CLB_RD_DATA8",
    "RIU2CLB_RD_DATA9",
    "RIU2CLB_VALID",
];

pub const X5PHY_LS_FROM_LPDDRMC_DMC2PHY: &[(&str, &str)] = &[
    ("DMC2PHY_CTRL_CLK", "RIU"),
    ("DMC2PHY_FIFO_CLK", "TX"),
    ("DMC2PHY_FIFO_RDEN", "RX"),
    ("DMC2PHY_RDEN0", "RX"),
    ("DMC2PHY_RDEN1", "RX"),
    ("DMC2PHY_RDEN2", "RX"),
    ("DMC2PHY_RDEN3", "RX"),
    ("DMC2PHY_RST", "TX"),
    ("DMC2PHY_WREN0", "TX"),
    ("DMC2PHY_WREN1", "TX"),
    ("DMC2PHY_WREN2", "TX"),
    ("DMC2PHY_WREN3", "TX"),
    ("DMC2PHY_WR_DQ0_0", "TX"),
    ("DMC2PHY_WR_DQ0_1", "TX"),
    ("DMC2PHY_WR_DQ0_2", "TX"),
    ("DMC2PHY_WR_DQ0_3", "TX"),
    ("DMC2PHY_WR_DQ0_4", "TX"),
    ("DMC2PHY_WR_DQ0_5", "TX"),
    ("DMC2PHY_WR_DQ0_6", "TX"),
    ("DMC2PHY_WR_DQ0_7", "TX"),
    ("DMC2PHY_WR_DQ1_0", "TX"),
    ("DMC2PHY_WR_DQ1_1", "TX"),
    ("DMC2PHY_WR_DQ1_2", "TX"),
    ("DMC2PHY_WR_DQ1_3", "TX"),
    ("DMC2PHY_WR_DQ1_4", "TX"),
    ("DMC2PHY_WR_DQ1_5", "TX"),
    ("DMC2PHY_WR_DQ1_6", "TX"),
    ("DMC2PHY_WR_DQ1_7", "TX"),
    ("DMC2PHY_WR_DQ2_0", "TX"),
    ("DMC2PHY_WR_DQ2_1", "TX"),
    ("DMC2PHY_WR_DQ2_2", "TX"),
    ("DMC2PHY_WR_DQ2_3", "TX"),
    ("DMC2PHY_WR_DQ2_4", "TX"),
    ("DMC2PHY_WR_DQ2_5", "TX"),
    ("DMC2PHY_WR_DQ2_6", "TX"),
    ("DMC2PHY_WR_DQ2_7", "TX"),
    ("DMC2PHY_WR_DQ3_0", "TX"),
    ("DMC2PHY_WR_DQ3_1", "TX"),
    ("DMC2PHY_WR_DQ3_2", "TX"),
    ("DMC2PHY_WR_DQ3_3", "TX"),
    ("DMC2PHY_WR_DQ3_4", "TX"),
    ("DMC2PHY_WR_DQ3_5", "TX"),
    ("DMC2PHY_WR_DQ3_6", "TX"),
    ("DMC2PHY_WR_DQ3_7", "TX"),
    ("DMC2PHY_WR_DQ4_0", "TX"),
    ("DMC2PHY_WR_DQ4_1", "TX"),
    ("DMC2PHY_WR_DQ4_2", "TX"),
    ("DMC2PHY_WR_DQ4_3", "TX"),
    ("DMC2PHY_WR_DQ4_4", "TX"),
    ("DMC2PHY_WR_DQ4_5", "TX"),
    ("DMC2PHY_WR_DQ4_6", "TX"),
    ("DMC2PHY_WR_DQ4_7", "TX"),
    ("DMC2PHY_WR_DQ5_0", "TX"),
    ("DMC2PHY_WR_DQ5_1", "TX"),
    ("DMC2PHY_WR_DQ5_2", "TX"),
    ("DMC2PHY_WR_DQ5_3", "TX"),
    ("DMC2PHY_WR_DQ5_4", "TX"),
    ("DMC2PHY_WR_DQ5_5", "TX"),
    ("DMC2PHY_WR_DQ5_6", "TX"),
    ("DMC2PHY_WR_DQ5_7", "TX"),
    ("DMC2RIU_ADDR0", "RIU"),
    ("DMC2RIU_ADDR1", "RIU"),
    ("DMC2RIU_ADDR2", "RIU"),
    ("DMC2RIU_ADDR3", "RIU"),
    ("DMC2RIU_ADDR4", "RIU"),
    ("DMC2RIU_ADDR5", "RIU"),
    ("DMC2RIU_ADDR6", "RIU"),
    ("DMC2RIU_ADDR7", "RIU"),
    ("DMC2RIU_NIBBLE_SEL", "RIU"),
    ("DMC2RIU_WR_DATA0", "RIU"),
    ("DMC2RIU_WR_DATA10", "RIU"),
    ("DMC2RIU_WR_DATA11", "RIU"),
    ("DMC2RIU_WR_DATA12", "RIU"),
    ("DMC2RIU_WR_DATA13", "RIU"),
    ("DMC2RIU_WR_DATA14", "RIU"),
    ("DMC2RIU_WR_DATA15", "RIU"),
    ("DMC2RIU_WR_DATA1", "RIU"),
    ("DMC2RIU_WR_DATA2", "RIU"),
    ("DMC2RIU_WR_DATA3", "RIU"),
    ("DMC2RIU_WR_DATA4", "RIU"),
    ("DMC2RIU_WR_DATA5", "RIU"),
    ("DMC2RIU_WR_DATA6", "RIU"),
    ("DMC2RIU_WR_DATA7", "RIU"),
    ("DMC2RIU_WR_DATA8", "RIU"),
    ("DMC2RIU_WR_DATA9", "RIU"),
    ("DMC2RIU_WR_EN", "RIU"),
];

pub const X5PHY_LPDDRMC_FROM_LS_DMC2PHY: &[(&str, &str)] = &[
    ("RIU2DMC_RD_DATA0", "RIU"),
    ("RIU2DMC_RD_DATA10", "RIU"),
    ("RIU2DMC_RD_DATA11", "RIU"),
    ("RIU2DMC_RD_DATA12", "RIU"),
    ("RIU2DMC_RD_DATA13", "RIU"),
    ("RIU2DMC_RD_DATA14", "RIU"),
    ("RIU2DMC_RD_DATA15", "RIU"),
    ("RIU2DMC_RD_DATA1", "RIU"),
    ("RIU2DMC_RD_DATA2", "RIU"),
    ("RIU2DMC_RD_DATA3", "RIU"),
    ("RIU2DMC_RD_DATA4", "RIU"),
    ("RIU2DMC_RD_DATA5", "RIU"),
    ("RIU2DMC_RD_DATA6", "RIU"),
    ("RIU2DMC_RD_DATA7", "RIU"),
    ("RIU2DMC_RD_DATA8", "RIU"),
    ("RIU2DMC_RD_DATA9", "RIU"),
    ("RIU2DMC_VALID", "RIU"),
    ("PHY2DMC_FIFO_EMPTY", "RX"),
    ("PHY2DMC_GT_STATUS", "RX"),
    ("PHY2DMC_RD_DQ0_0", "RX"),
    ("PHY2DMC_RD_DQ0_1", "RX"),
    ("PHY2DMC_RD_DQ0_2", "RX"),
    ("PHY2DMC_RD_DQ0_3", "RX"),
    ("PHY2DMC_RD_DQ0_4", "RX"),
    ("PHY2DMC_RD_DQ0_5", "RX"),
    ("PHY2DMC_RD_DQ0_6", "RX"),
    ("PHY2DMC_RD_DQ0_7", "RX"),
    ("PHY2DMC_RD_DQ1_0", "RX"),
    ("PHY2DMC_RD_DQ1_1", "RX"),
    ("PHY2DMC_RD_DQ1_2", "RX"),
    ("PHY2DMC_RD_DQ1_3", "RX"),
    ("PHY2DMC_RD_DQ1_4", "RX"),
    ("PHY2DMC_RD_DQ1_5", "RX"),
    ("PHY2DMC_RD_DQ1_6", "RX"),
    ("PHY2DMC_RD_DQ1_7", "RX"),
    ("PHY2DMC_RD_DQ2_0", "RX"),
    ("PHY2DMC_RD_DQ2_1", "RX"),
    ("PHY2DMC_RD_DQ2_2", "RX"),
    ("PHY2DMC_RD_DQ2_3", "RX"),
    ("PHY2DMC_RD_DQ2_4", "RX"),
    ("PHY2DMC_RD_DQ2_5", "RX"),
    ("PHY2DMC_RD_DQ2_6", "RX"),
    ("PHY2DMC_RD_DQ2_7", "RX"),
    ("PHY2DMC_RD_DQ3_0", "RX"),
    ("PHY2DMC_RD_DQ3_1", "RX"),
    ("PHY2DMC_RD_DQ3_2", "RX"),
    ("PHY2DMC_RD_DQ3_3", "RX"),
    ("PHY2DMC_RD_DQ3_4", "RX"),
    ("PHY2DMC_RD_DQ3_5", "RX"),
    ("PHY2DMC_RD_DQ3_6", "RX"),
    ("PHY2DMC_RD_DQ3_7", "RX"),
    ("PHY2DMC_RD_DQ4_0", "RX"),
    ("PHY2DMC_RD_DQ4_1", "RX"),
    ("PHY2DMC_RD_DQ4_2", "RX"),
    ("PHY2DMC_RD_DQ4_3", "RX"),
    ("PHY2DMC_RD_DQ4_4", "RX"),
    ("PHY2DMC_RD_DQ4_5", "RX"),
    ("PHY2DMC_RD_DQ4_6", "RX"),
    ("PHY2DMC_RD_DQ4_7", "RX"),
    ("PHY2DMC_RD_DQ5_0", "RX"),
    ("PHY2DMC_RD_DQ5_1", "RX"),
    ("PHY2DMC_RD_DQ5_2", "RX"),
    ("PHY2DMC_RD_DQ5_3", "RX"),
    ("PHY2DMC_RD_DQ5_4", "RX"),
    ("PHY2DMC_RD_DQ5_5", "RX"),
    ("PHY2DMC_RD_DQ5_6", "RX"),
    ("PHY2DMC_RD_DQ5_7", "RX"),
];

pub const X5PHY_LPDDRMC_FROM_LS_DFX: &[&str] = &[
    "DFX_UNEXPECTED_ACTIVATION",
    "PHY2CLB_SCAN_CNTRL_CHNL_OUT",
    "PHY2CLB_SCAN_COMP_OUT",
    "PHY2CLB_SCAN_OUT",
];

pub const X5PHY_LS_FROM_LPDDRMC_DFX: &[&str] = &[
    "CLB2PHY_CSSD_TRIG",
    "CLB2PHY_SCAN_CNTRL_CHNL_IN",
    "CLB2PHY_SCAN_COMP_IN",
    "CLB2PHY_SCAN_IN",
];

pub const X5PHY_LS_FROM_LPDDRMC_DFX_BROADCAST: &[&str] = &[
    "CLB2PHY_SCAN_CLK_B",
    "CLB2PHY_SCAN_EDT_UPDT_B",
    "CLB2PHY_SCAN_EN_B",
    "CLB2PHY_SCAN_MODE_RST_B",
];

pub fn verify_xp5io_vref(vrf: &mut Verifier, bel: &BelContext<'_>) {
    let idx = bels::XP5IO_VREF
        .into_iter()
        .position(|x| bel.slot == x)
        .unwrap();
    let pins = [
        ("FAB2IOB_R2R_DAC_SEL0", SitePinDir::In),
        ("FAB2IOB_R2R_DAC_SEL1", SitePinDir::In),
        ("FAB2IOB_R2R_DAC_SEL2", SitePinDir::In),
        ("FAB2IOB_R2R_DAC_SEL3", SitePinDir::In),
        ("FAB2IOB_R2R_DAC_SEL4", SitePinDir::In),
        ("FAB2IOB_R2R_DAC_SEL5", SitePinDir::In),
        ("FAB2IOB_R2R_DAC_SEL6", SitePinDir::In),
        ("FAB2IOB_R2R_DAC_SEL7", SitePinDir::In),
        ("FAB2IOB_R2R_DAC_SEL8", SitePinDir::In),
        ("FAB2IOB_R2R_DAC_SEL9", SitePinDir::In),
        ("PHY2IOB_R2RDAC_MODE", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL0", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL1", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL2", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL3", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL4", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL5", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL6", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL7", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL8", SitePinDir::In),
        ("PHY2IOB_R2RDAC_SEL9", SitePinDir::In),
        ("VREF2IOB_VREF", SitePinDir::Out),
    ];
    vrf.verify_bel(bel, "XP5IO_VREF", &pins, &[]);
    for (pin, _) in pins {
        vrf.claim_net(&[bel.fwire(pin)]);
    }

    let obel_x5phy_ls = vrf.find_bel_sibling(bel, bels::X5PHY_LS[idx]);
    for (wire, owire) in [
        ("FAB2IOB_R2R_DAC_SEL0", "PHY2IOB_KEEPER_EN0"),
        ("FAB2IOB_R2R_DAC_SEL1", "PHY2IOB_KEEPER_EN1"),
        ("FAB2IOB_R2R_DAC_SEL2", "PHY2IOB_KEEPER_EN2"),
        ("FAB2IOB_R2R_DAC_SEL3", "PHY2IOB_KEEPER_EN3"),
        ("FAB2IOB_R2R_DAC_SEL4", "PHY2IOB_KEEPER_EN4"),
        ("FAB2IOB_R2R_DAC_SEL5", "PHY2IOB_KEEPER_EN5"),
        ("FAB2IOB_R2R_DAC_SEL6", "PHY2IOB_PD_EN_1_0"),
        ("FAB2IOB_R2R_DAC_SEL7", "PHY2IOB_PD_EN_1_1"),
        ("FAB2IOB_R2R_DAC_SEL8", "PHY2IOB_PD_EN_1_2"),
        ("FAB2IOB_R2R_DAC_SEL9", "PHY2IOB_LP_TX_T_OR_PD_EN_0_0"),
        ("PHY2IOB_R2RDAC_MODE", "PHY2IOB_R2RDAC_MODE"),
        ("PHY2IOB_R2RDAC_SEL0", "PHY2IOB_R2RDAC_SEL0"),
        ("PHY2IOB_R2RDAC_SEL1", "PHY2IOB_R2RDAC_SEL1"),
        ("PHY2IOB_R2RDAC_SEL2", "PHY2IOB_R2RDAC_SEL2"),
        ("PHY2IOB_R2RDAC_SEL3", "PHY2IOB_R2RDAC_SEL3"),
        ("PHY2IOB_R2RDAC_SEL4", "PHY2IOB_R2RDAC_SEL4"),
        ("PHY2IOB_R2RDAC_SEL5", "PHY2IOB_R2RDAC_SEL5"),
        ("PHY2IOB_R2RDAC_SEL6", "PHY2IOB_R2RDAC_SEL6"),
        ("PHY2IOB_R2RDAC_SEL7", "PHY2IOB_R2RDAC_SEL7"),
        ("PHY2IOB_R2RDAC_SEL8", "PHY2IOB_R2RDAC_SEL8"),
        ("PHY2IOB_R2RDAC_SEL9", "PHY2IOB_R2RDAC_SEL9"),
    ] {
        vrf.claim_pip(bel.crd(), bel.wire(wire), obel_x5phy_ls.wire(owire));
    }
}

pub fn verify_x5phy_ls(vrf: &mut Verifier, bel: &BelContext<'_>) {
    let idx = bels::X5PHY_LS
        .into_iter()
        .position(|x| bel.slot == x)
        .unwrap();
    let mut alloc_ins = vec![];
    let mut alloc_outs = vec![];
    for &pin in X5PHY_LS_FROM_LPDDRMC_CLB2PHY {
        alloc_ins.push(format!("IF_CLB2PHY_{pin}"));
    }
    for &pin in X5PHY_LPDDRMC_FROM_LS_CLB2PHY {
        alloc_outs.push(format!("IF_CLB2PHY_{pin}"));
    }
    for &(pin, _) in X5PHY_LS_FROM_LPDDRMC_DMC2PHY {
        alloc_ins.push(format!("IF_DMC2PHY_{pin}"));
    }
    for &(pin, _) in X5PHY_LPDDRMC_FROM_LS_DMC2PHY {
        alloc_outs.push(format!("IF_DMC2PHY_{pin}"));
    }
    let mut pins = vec![
        ("XXX2PHY_IJTAG_TDI_RETURN", SitePinDir::In),
        ("XXX2PHY_IJTAG_TDI", SitePinDir::In),
        ("PHY2XXX_IJTAG_TDO_RETURN", SitePinDir::Out),
        ("PHY2XXX_IJTAG_TDO", SitePinDir::Out),
        ("IOB2COMP_LSPEED_I0", SitePinDir::In),
        ("IOB2COMP_LSPEED_I1", SitePinDir::In),
        ("IOB2COMP_LSPEED_I2", SitePinDir::In),
        ("IOB2COMP_LSPEED_I3", SitePinDir::In),
        ("IOB2COMP_LSPEED_I4", SitePinDir::In),
        ("IOB2COMP_LSPEED_I5", SitePinDir::In),
        ("IOB2PHY_LP_I_0_0", SitePinDir::In),
        ("IOB2PHY_LP_I_0_1", SitePinDir::In),
        ("IOB2PHY_LP_I_0_2", SitePinDir::In),
        ("IOB2PHY_LP_I_1_0", SitePinDir::In),
        ("IOB2PHY_LP_I_1_1", SitePinDir::In),
        ("IOB2PHY_LP_I_1_2", SitePinDir::In),
        ("PHY2IOB_DYNAMIC_DCI_TS0", SitePinDir::Out),
        ("PHY2IOB_DYNAMIC_DCI_TS1", SitePinDir::Out),
        ("PHY2IOB_DYNAMIC_DCI_TS2", SitePinDir::Out),
        ("PHY2IOB_DYNAMIC_DCI_TS3", SitePinDir::Out),
        ("PHY2IOB_DYNAMIC_DCI_TS4", SitePinDir::Out),
        ("PHY2IOB_DYNAMIC_DCI_TS5", SitePinDir::Out),
        ("PHY2IOB_KEEPER_EN0", SitePinDir::Out),
        ("PHY2IOB_KEEPER_EN1", SitePinDir::Out),
        ("PHY2IOB_KEEPER_EN2", SitePinDir::Out),
        ("PHY2IOB_KEEPER_EN3", SitePinDir::Out),
        ("PHY2IOB_KEEPER_EN4", SitePinDir::Out),
        ("PHY2IOB_KEEPER_EN5", SitePinDir::Out),
        ("PHY2IOB_LP_TX_O_OR_PU_EN_0_0", SitePinDir::Out),
        ("PHY2IOB_LP_TX_O_OR_PU_EN_0_1", SitePinDir::Out),
        ("PHY2IOB_LP_TX_O_OR_PU_EN_0_2", SitePinDir::Out),
        ("PHY2IOB_LP_TX_O_OR_PU_EN_1_0", SitePinDir::Out),
        ("PHY2IOB_LP_TX_O_OR_PU_EN_1_1", SitePinDir::Out),
        ("PHY2IOB_LP_TX_O_OR_PU_EN_1_2", SitePinDir::Out),
        ("PHY2IOB_IBUF_DISABLE0", SitePinDir::Out),
        ("PHY2IOB_IBUF_DISABLE1", SitePinDir::Out),
        ("PHY2IOB_IBUF_DISABLE2", SitePinDir::Out),
        ("PHY2IOB_IBUF_DISABLE3", SitePinDir::Out),
        ("PHY2IOB_IBUF_DISABLE4", SitePinDir::Out),
        ("PHY2IOB_IBUF_DISABLE5", SitePinDir::Out),
        ("PHY2IOB_LP_RX_DIS_OR_TERM_EN0", SitePinDir::Out),
        ("PHY2IOB_LP_RX_DIS_OR_TERM_EN1", SitePinDir::Out),
        ("PHY2IOB_LP_RX_DIS_OR_TERM_EN2", SitePinDir::Out),
        ("PHY2IOB_LP_TX_T_OR_PD_EN_0_0", SitePinDir::Out),
        ("PHY2IOB_LP_TX_T_OR_PD_EN_0_1", SitePinDir::Out),
        ("PHY2IOB_LP_TX_T_OR_PD_EN_0_2", SitePinDir::Out),
        ("PHY2IOB_PD_EN_1_0", SitePinDir::Out),
        ("PHY2IOB_PD_EN_1_1", SitePinDir::Out),
        ("PHY2IOB_PD_EN_1_2", SitePinDir::Out),
        ("IF_DMC2PHY_DMC2PHY_T_TXBIT0", SitePinDir::In),
        ("IF_DMC2PHY_DMC2PHY_T_TXBIT1", SitePinDir::In),
        ("IF_DMC2PHY_DMC2PHY_T_TXBIT2", SitePinDir::In),
        ("IF_DMC2PHY_DMC2PHY_T_TXBIT3", SitePinDir::In),
        ("IF_DMC2PHY_DMC2PHY_T_TXBIT4", SitePinDir::In),
        ("IF_DMC2PHY_DMC2PHY_T_TXBIT5", SitePinDir::In),
        ("DIV4_CLK", SitePinDir::Out),
        ("PHY2GCLK_FIFO_WRCLK", SitePinDir::Out),
        ("PHY2PHY_BISC_START_IN", SitePinDir::In),
        ("PHY2PHY_BISC_START_OUT", SitePinDir::Out),
        ("PHY2PHY_BISC_STOP_IN", SitePinDir::In),
        ("PHY2PHY_BISC_STOP_OUT", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_MODE", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL0", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL1", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL2", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL3", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL4", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL5", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL6", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL7", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL8", SitePinDir::Out),
        ("PHY2IOB_R2RDAC_SEL9", SitePinDir::Out),
        ("CFG2PHY_SCAN_DATA_OUT_INT0", SitePinDir::In),
        ("CFG2PHY_SCAN_DATA_OUT_INT1", SitePinDir::In),
        ("CFG2PHY_SCAN_DATA_OUT_INT2", SitePinDir::In),
        ("CFG2PHY_SCAN_DATA_OUT_INT3", SitePinDir::In),
    ];
    for pin in X5PHY_LPDDRMC_FROM_LS_DFX {
        pins.push((pin, SitePinDir::Out));
    }
    for pin in X5PHY_LS_FROM_LPDDRMC_DFX {
        pins.push((pin, SitePinDir::In));
    }
    for pin in X5PHY_LS_FROM_LPDDRMC_DFX_BROADCAST {
        pins.push((pin, SitePinDir::In));
    }
    for &(pin, _) in X5PHY_LS_FROM_HS {
        pins.push((pin, SitePinDir::In));
    }
    for &(opin, pin) in X5PHY_HS_FROM_LS {
        if !opin.starts_with("XMC_ODELAY_FDLY") && !opin.starts_with("XMC_IDELAY_FDLY") {
            pins.push((pin, SitePinDir::Out));
        }
    }
    for pin in &alloc_ins {
        pins.push((pin.as_str(), SitePinDir::In));
    }
    for pin in &alloc_outs {
        pins.push((pin.as_str(), SitePinDir::Out));
    }
    for &(ipin, opin) in XP5IO_RTRIM {
        pins.push((ipin, SitePinDir::In));
        pins.push((opin, SitePinDir::Out));
    }
    for &(_, _, opin, ipin) in XP5IO_JTAG {
        pins.push((ipin, SitePinDir::In));
        pins.push((opin, SitePinDir::Out));
    }

    vrf.verify_bel(bel, "X5PHY_LS", &pins, &[]);
    for (pin, _) in pins {
        vrf.claim_net(&[bel.fwire(pin)]);
    }

    for i in 0..3 {
        let obel_iob = vrf.find_bel_sibling(bel, bels::XP5IOB[idx * 3 + i]);
        for j in 0..2 {
            vrf.claim_pip(
                bel.crd(),
                bel.wire(&format!("IOB2COMP_LSPEED_I{jj}", jj = i * 2 + j)),
                obel_iob.wire(&format!("IOB2COMP_LSPEED_I{j}")),
            );
            vrf.claim_pip(
                bel.crd(),
                bel.wire(&format!("IOB2PHY_LP_I_{j}_{i}")),
                obel_iob.wire(&format!("IOB2PHY_LP_I_{j}")),
            );
        }
    }

    let obel_x5phy_hs = vrf.find_bel_sibling(bel, bels::X5PHY_HS[idx]);
    for &(pin, opin) in X5PHY_LS_FROM_HS {
        vrf.claim_pip(bel.crd(), bel.wire(pin), obel_x5phy_hs.wire(opin));
    }

    let obel_lpddrmc = vrf.find_bel_sibling(bel, bels::LPDDRMC);
    for &pin in X5PHY_LS_FROM_LPDDRMC_CLB2PHY {
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("IF_CLB2PHY_{pin}")),
            obel_lpddrmc.wire(&format!("IF_DMC_CLB2PHY_P{idx}_{pin}")),
        );
    }
    for &(pin, prefix) in X5PHY_LS_FROM_LPDDRMC_DMC2PHY {
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("IF_DMC2PHY_{pin}")),
            obel_lpddrmc.wire(&format!("IF_DMC2PHY_{prefix}{idx}_{pin}")),
        );
    }
    for i in 0..6 {
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("IF_DMC2PHY_DMC2PHY_T_TXBIT{i}")),
            obel_lpddrmc.wire(&format!("DMC2PHY_T_TXBIT{ii}", ii = idx * 6 + i)),
        );
    }

    for pin in X5PHY_LS_FROM_LPDDRMC_DFX {
        vrf.claim_pip(
            bel.crd(),
            bel.wire(pin),
            obel_lpddrmc.wire(&format!("IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_{pin}{idx}")),
        );
    }
    for pin in X5PHY_LS_FROM_LPDDRMC_DFX_BROADCAST {
        vrf.claim_pip(
            bel.crd(),
            bel.wire(pin),
            obel_lpddrmc.wire(&format!("IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_{pin}")),
        );
    }

    let obel_dig = vrf.find_bel_sibling(bel, bels::XP5PIO_CMU_DIG_TOP);

    // ... <- 9 <- 8 <- 7 <- 6 <- 10 <- DIG <- 5 <- 4 <- 3 <- 2 <- 1 <- 0 <- ...
    let idx_n = if idx == 10 {
        5
    } else if idx == 6 {
        10
    } else if idx == 0 {
        // ... from upper bank
        9
    } else {
        idx - 1
    };

    let idx_s = if idx == 10 {
        6
    } else if idx == 5 {
        10
    } else if idx == 9 {
        // ... from lower bank
        0
    } else {
        idx + 1
    };

    if idx == 10 {
        for &(ipin, opin) in XP5IO_RTRIM {
            vrf.claim_pip(bel.crd(), bel.wire(ipin), obel_dig.wire(opin));
        }
    } else if idx == 0 {
        for &(ipin, _) in XP5IO_RTRIM {
            vrf.claim_pip(bel.crd(), bel.wire(ipin), bel.wire_far(ipin));
        }
        if let Some(obel) = vrf.find_bel_delta(bel, 0, 60, bels::X5PHY_LS[9]) {
            for &(ipin, opin) in XP5IO_RTRIM {
                vrf.verify_net(&[bel.fwire_far(ipin), obel.fwire(opin)]);
            }
        } else {
            for &(ipin, _) in XP5IO_RTRIM {
                vrf.claim_net(&[bel.fwire_far(ipin)]);
            }
        }
    } else {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[idx_n]);
        for &(ipin, opin) in XP5IO_RTRIM {
            vrf.claim_pip(bel.crd(), bel.wire(ipin), obel.wire(opin));
        }
    }

    if idx == 0 {
        vrf.claim_pip(
            bel.crd(),
            bel.wire("PHY2PHY_BISC_START_IN"),
            bel.wire("PHY2PHY_BISC_STOP_OUT"),
        );
    } else {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[idx_n]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire("PHY2PHY_BISC_START_IN"),
            obel.wire("PHY2PHY_BISC_START_OUT"),
        );
    }
    if idx != 9 {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[idx_s]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire("PHY2PHY_BISC_STOP_IN"),
            obel.wire("PHY2PHY_BISC_STOP_OUT"),
        );
    }

    for &(lpddrmc_pin, _, opin, ipin) in XP5IO_JTAG {
        if idx == 5 || idx == 10 {
            vrf.claim_pip(bel.crd(), bel.wire(ipin), obel_lpddrmc.wire(lpddrmc_pin));
        } else if idx < 5 {
            let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[idx + 1]);
            vrf.claim_pip(bel.crd(), bel.wire(ipin), obel.wire(opin));
        } else if idx == 6 {
            let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[10]);
            vrf.claim_pip(bel.crd(), bel.wire(ipin), obel.wire(opin));
        } else {
            let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[idx - 1]);
            vrf.claim_pip(bel.crd(), bel.wire(ipin), obel.wire(opin));
        }
    }

    if idx == 0 {
        vrf.claim_pip(
            bel.crd(),
            bel.wire("XXX2PHY_IJTAG_TDI"),
            bel.wire("PHY2XXX_IJTAG_TDO_RETURN"),
        );
    } else if idx == 10 {
        vrf.claim_pip(
            bel.crd(),
            bel.wire("XXX2PHY_IJTAG_TDI"),
            obel_dig.wire("IJTAG_TDO_EXT"),
        );
    } else {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[idx_n]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire("XXX2PHY_IJTAG_TDI"),
            obel.wire("PHY2XXX_IJTAG_TDO"),
        );
    }

    if idx == 9 {
        vrf.claim_pip(
            bel.crd(),
            bel.wire("XXX2PHY_IJTAG_TDI_RETURN"),
            bel.wire("PHY2XXX_IJTAG_TDO"),
        );
    } else if idx == 5 {
        vrf.claim_pip(
            bel.crd(),
            bel.wire("XXX2PHY_IJTAG_TDI_RETURN"),
            obel_dig.wire("IJTAG_TDO_RETURN_EXT"),
        );
    } else {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[idx_s]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire("XXX2PHY_IJTAG_TDI_RETURN"),
            obel.wire("PHY2XXX_IJTAG_TDO_RETURN"),
        );
    }
}

pub fn verify_x5phy_hs(vrf: &mut Verifier, bel: &BelContext<'_>) {
    let idx = bels::X5PHY_HS
        .into_iter()
        .position(|x| bel.slot == x)
        .unwrap();
    let mut pins = vec![];
    for &(pin, _) in X5PHY_HS_FROM_LS {
        pins.push((pin, SitePinDir::In));
    }
    for &(_, pin) in X5PHY_LS_FROM_HS {
        pins.push((pin, SitePinDir::Out));
    }
    pins.extend([
        ("PLL_CLK", SitePinDir::In),
        ("CLK_FROM_EXT", SitePinDir::In),
        ("CLK_TO_EXT_NORTH", SitePinDir::Out),
        ("CLK_TO_EXT_SOUTH", SitePinDir::Out),
        ("PDQS_GT_IN", SitePinDir::In),
        ("NDQS_GT_IN", SitePinDir::In),
        ("PDQS_GT_OUT", SitePinDir::Out),
        ("NDQS_GT_OUT", SitePinDir::Out),
        ("IOB2PHY_RX_D0", SitePinDir::In),
        ("IOB2PHY_RX_D1", SitePinDir::In),
        ("IOB2PHY_RX_D2", SitePinDir::In),
        ("IOB2PHY_RX_D3", SitePinDir::In),
        ("IOB2PHY_RX_D4", SitePinDir::In),
        ("IOB2PHY_RX_D5", SitePinDir::In),
        ("HRT_PHY2IOB_O0_0", SitePinDir::Out),
        ("HRT_PHY2IOB_O0_1", SitePinDir::Out),
        ("HRT_PHY2IOB_O0_2", SitePinDir::Out),
        ("HRT_PHY2IOB_O0_3", SitePinDir::Out),
        ("HRT_PHY2IOB_O0_4", SitePinDir::Out),
        ("HRT_PHY2IOB_O0_5", SitePinDir::Out),
        ("HRT_PHY2IOB_T0", SitePinDir::Out),
        ("HRT_PHY2IOB_T1", SitePinDir::Out),
        ("HRT_PHY2IOB_T2", SitePinDir::Out),
        ("HRT_PHY2IOB_T3", SitePinDir::Out),
        ("HRT_PHY2IOB_T4", SitePinDir::Out),
        ("HRT_PHY2IOB_T5", SitePinDir::Out),
        ("CLB2PHY_CTRL_DLY_TEST_IN", SitePinDir::In),
    ]);
    vrf.verify_bel(bel, "X5PHY_HS", &pins, &[]);
    for (pin, _) in pins {
        vrf.claim_net(&[bel.fwire(pin)]);
    }
    for i in 0..3 {
        let obel_iob = vrf.find_bel_sibling(bel, bels::XP5IOB[idx * 3 + i]);
        for j in 0..2 {
            vrf.claim_pip(
                bel.crd(),
                bel.wire(&format!("IOB2PHY_RX_D{jj}", jj = i * 2 + j)),
                obel_iob.wire(&format!("IOB2PHY_I{j}")),
            );
        }
    }

    let obel_x5phy_ls = vrf.find_bel_sibling(bel, bels::X5PHY_LS[idx]);
    for &(pin, opin) in X5PHY_HS_FROM_LS {
        vrf.claim_pip(bel.crd(), bel.wire(pin), obel_x5phy_ls.wire(opin));
    }

    let obel_x5phy_pllsel = vrf.find_bel_sibling(bel, bels::X5PHY_PLL_SELECT[idx]);
    vrf.claim_pip(bel.crd(), bel.wire("PLL_CLK"), obel_x5phy_pllsel.wire("Z"));

    if idx < 5 {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_HS[idx + 2]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire("CLK_FROM_EXT"),
            obel.wire("CLK_TO_EXT_NORTH"),
        );
    } else if idx < 10 {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_HS[idx - 2]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire("CLK_FROM_EXT"),
            obel.wire("CLK_TO_EXT_SOUTH"),
        );
    } else {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_HS[7]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire("CLK_FROM_EXT"),
            obel.wire("CLK_TO_EXT_NORTH"),
        );
    }

    if idx < 10 {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_HS[idx ^ 1]);
        vrf.claim_pip(bel.crd(), bel.wire("PDQS_GT_IN"), obel.wire("PDQS_GT_OUT"));
        vrf.claim_pip(bel.crd(), bel.wire("NDQS_GT_IN"), obel.wire("NDQS_GT_OUT"));
    }
}

pub fn verify_x5phy_pll_select(vrf: &mut Verifier, bel: &BelContext<'_>) {
    let pins = [
        ("D0", SitePinDir::In),
        ("D1", SitePinDir::In),
        ("DIS", SitePinDir::In),
        ("Z", SitePinDir::Out),
    ];
    vrf.verify_bel(bel, "X5PHY_PLL_SELECT", &pins, &[]);
    for (pin, _) in pins {
        vrf.claim_net(&[bel.fwire(pin)]);
    }
    let obel = vrf.find_bel_sibling(bel, bels::LPDDRMC);
    vrf.claim_pip(bel.crd(), bel.wire("D0"), obel.wire("PLL0_CLKOUTPHY_OABUT"));
    vrf.claim_pip(bel.crd(), bel.wire("D1"), obel.wire("PLL1_CLKOUTPHY_OABUT"));
}

pub const XP5PIO_ANA_FROM_DIG: &[(&str, &str)] = &[
    ("DCI_IMPCAL_REF0", "IMPCALANA_VREF_SEL0"),
    ("DCI_IMPCAL_REF1", "IMPCALANA_VREF_SEL1"),
    ("DCI_IMPCAL_REF2", "IMPCALANA_VREF_SEL2"),
    ("DCI_IMPCAL_REF3", "IMPCALANA_VREF_SEL3"),
    ("DCI_IMPCAL_REF4", "IMPCALANA_VREF_SEL4"),
    ("DCI_IMPCAL_REF5", "IMPCALANA_VREF_SEL5"),
    ("DCI_IMPCAL_REF6", "IMPCALANA_VREF_SEL6"),
    ("DCI_IMPCAL_REF7", "IMPCALANA_VREF_SEL7"),
    ("DCI_IMPCAL_REF8", "IMPCALANA_VREF_SEL8"),
    ("DCI_IMPCAL_REF9", "IMPCALANA_VREF_SEL9"),
    ("IMPCALANA_REF_ENABLE", "IMPCAL_COMP_EN"),
    ("IMPCAL_COMP_EN", "IMPCAL_COMP_EN"),
    ("IMPCAL_RTUNE0", "IMPCAL_RTUNE1"),
    ("IMPCAL_RTUNE1", "IMPCAL_RTUNE2"),
    ("IMPCAL_RTUNE2", "IMPCAL_RTUNE3"),
    ("IMPCAL_RTUNE3", "IMPCAL_RTUNE4"),
    ("IMPCAL_RTUNE4", "IMPCAL_RTUNE5"),
    ("IMPCAL_RTUNE5", "IMPCAL_RTUNE6"),
    ("IMPCAL_RTUNE6", "IMPCAL_RTUNE7"),
    ("IMPCAL_RTUNE7", "IMPCAL_RTUNE8"),
    ("NCODE_FINAL0", "NCODE_FINAL0"),
    ("NCODE_FINAL1", "NCODE_FINAL1"),
    ("NCODE_FINAL2", "NCODE_FINAL2"),
    ("NCODE_FINAL3", "NCODE_FINAL3"),
    ("NCODE_FINAL4", "NCODE_FINAL4"),
    ("NCODE_FINAL5", "NCODE_FINAL5"),
    ("NCODE_FINAL6", "NCODE_FINAL6"),
    ("PCODE_FINAL0", "PCODE_FINAL0"),
    ("PCODE_FINAL1", "PCODE_FINAL1"),
    ("PCODE_FINAL2", "PCODE_FINAL2"),
    ("PCODE_FINAL3", "PCODE_FINAL3"),
    ("PCODE_FINAL4", "PCODE_FINAL4"),
    ("PCODE_FINAL5", "PCODE_FINAL5"),
    ("PCODE_FINAL6", "PCODE_FINAL6"),
    ("RCAL_ANA_MASTER_EN", "RCAL_ANA_MASTER_EN"),
    ("RCAL_OFC_SEL_MUX", "RCAL_OFC_SEL_MUX"),
    ("RCAL_RTUNE0", "RCAL_RTUNE0"),
    ("RCAL_RTUNE1", "RCAL_RTUNE1"),
    ("RCAL_RTUNE2", "RCAL_RTUNE2"),
    ("RCAL_RTUNE3", "RCAL_RTUNE3"),
    ("RCAL_RTUNE4", "RCAL_RTUNE4"),
    ("RCAL_RTUNE5", "RCAL_RTUNE5"),
    ("RCAL_RTUNE6", "RCAL_RTUNE6"),
    ("RCAL_RTUNE7", "RCAL_RTUNE7"),
    ("RCAL_RTUNE8", "RCAL_RTUNE8"),
    ("RX_ODT_PD_NPAD0", "DCISM2IMPCALANA_NREG_CRTL10"),
    ("RX_ODT_PD_NPAD1", "DCISM2IMPCALANA_NREG_CRTL11"),
    ("RX_ODT_PD_NPAD2", "DCISM2IMPCALANA_NREG_CRTL12"),
    ("RX_ODT_PD_NPAD3", "DCISM2IMPCALANA_NREG_CRTL13"),
    ("RX_ODT_PD_NPAD4", "DCISM2IMPCALANA_NREG_CRTL14"),
    ("RX_ODT_PD_NPAD5", "DCISM2IMPCALANA_NREG_CRTL15"),
    ("RX_ODT_PD_NPAD6", "DCISM2IMPCALANA_NREG_CRTL16"),
    ("RX_ODT_PD_NPAD7", "DCISM2IMPCALANA_NREG_CRTL17"),
    ("RX_ODT_PD_PPAD0", "DCISM2IMPCALANA_PREG_CRTL10"),
    ("RX_ODT_PD_PPAD1", "DCISM2IMPCALANA_PREG_CRTL11"),
    ("RX_ODT_PD_PPAD2", "DCISM2IMPCALANA_PREG_CRTL12"),
    ("RX_ODT_PD_PPAD3", "DCISM2IMPCALANA_PREG_CRTL13"),
    ("RX_ODT_PD_PPAD4", "DCISM2IMPCALANA_PREG_CRTL14"),
    ("RX_ODT_PD_PPAD5", "DCISM2IMPCALANA_PREG_CRTL15"),
    ("RX_ODT_PD_PPAD6", "DCISM2IMPCALANA_PREG_CRTL16"),
    ("RX_ODT_PD_PPAD7", "DCISM2IMPCALANA_PREG_CRTL17"),
    ("RX_ODT_PU_NPAD0", "DCISM2IMPCALANA_NREG_CRTL2"),
    ("RX_ODT_PU_NPAD1", "DCISM2IMPCALANA_NREG_CRTL3"),
    ("RX_ODT_PU_NPAD2", "DCISM2IMPCALANA_NREG_CRTL4"),
    ("RX_ODT_PU_NPAD3", "DCISM2IMPCALANA_NREG_CRTL5"),
    ("RX_ODT_PU_NPAD4", "DCISM2IMPCALANA_NREG_CRTL6"),
    ("RX_ODT_PU_NPAD5", "DCISM2IMPCALANA_NREG_CRTL7"),
    ("RX_ODT_PU_NPAD6", "DCISM2IMPCALANA_NREG_CRTL8"),
    ("RX_ODT_PU_NPAD7", "DCISM2IMPCALANA_NREG_CRTL9"),
    ("RX_ODT_PU_PPAD0", "DCISM2IMPCALANA_PREG_CRTL2"),
    ("RX_ODT_PU_PPAD1", "DCISM2IMPCALANA_PREG_CRTL3"),
    ("RX_ODT_PU_PPAD2", "DCISM2IMPCALANA_PREG_CRTL4"),
    ("RX_ODT_PU_PPAD3", "DCISM2IMPCALANA_PREG_CRTL5"),
    ("RX_ODT_PU_PPAD4", "DCISM2IMPCALANA_PREG_CRTL6"),
    ("RX_ODT_PU_PPAD5", "DCISM2IMPCALANA_PREG_CRTL7"),
    ("RX_ODT_PU_PPAD6", "DCISM2IMPCALANA_PREG_CRTL8"),
    ("RX_ODT_PU_PPAD7", "DCISM2IMPCALANA_PREG_CRTL9"),
    ("TERMN_NPAD", "DCISM2IMPCALANA_NREG_CRTL1"),
    ("TERMN_PPAD", "DCISM2IMPCALANA_PREG_CRTL1"),
    ("TERMP_NPAD", "DCISM2IMPCALANA_NREG_CRTL0"),
    ("TERMP_PPAD", "DCISM2IMPCALANA_PREG_CRTL0"),
];

pub const XP5PIO_DIG_FROM_ANA: &[(&str, &str)] = &[
    ("IMPCALANA2DCISM_COMP_OUT0", "CALTX2DCI_COMP_OUT0"),
    ("IMPCALANA2DCISM_COMP_OUT1", "CALTX2DCI_COMP_OUT1"),
    ("RCALANA2DCISM_COMP_OUT", "RCAL_COMP_OUT"),
];

pub const XP5PIO_DIG_FROM_LPDDRMC: &[(&str, &str)] = &[
    (
        "CLB2MISC_SCAN_CLK_B",
        "IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_CLB2PHY_SCAN_CLK_B",
    ),
    (
        "CLB2MISC_SCAN_EN_B",
        "IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_CLB2PHY_SCAN_EN_B",
    ),
    (
        "CLB2MISC_SCAN_MODE_RST_B",
        "IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_CLB2PHY_SCAN_MODE_RST_B",
    ),
    (
        "DCI_OK_TO_UPDATE",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2IOB_PUDC_B",
    ),
    (
        "DCI_TEST_I0",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I0",
    ),
    (
        "DCI_TEST_I10",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I10",
    ),
    (
        "DCI_TEST_I11",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I11",
    ),
    (
        "DCI_TEST_I12",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I12",
    ),
    (
        "DCI_TEST_I13",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I13",
    ),
    (
        "DCI_TEST_I14",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I14",
    ),
    (
        "DCI_TEST_I15",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I15",
    ),
    (
        "DCI_TEST_I16",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I16",
    ),
    (
        "DCI_TEST_I17",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I17",
    ),
    (
        "DCI_TEST_I18",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I18",
    ),
    (
        "DCI_TEST_I19",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I19",
    ),
    (
        "DCI_TEST_I1",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I1",
    ),
    (
        "DCI_TEST_I20",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I20",
    ),
    (
        "DCI_TEST_I21",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I21",
    ),
    (
        "DCI_TEST_I22",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I22",
    ),
    (
        "DCI_TEST_I23",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I23",
    ),
    (
        "DCI_TEST_I2",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I2",
    ),
    (
        "DCI_TEST_I3",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I3",
    ),
    (
        "DCI_TEST_I4",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I4",
    ),
    (
        "DCI_TEST_I5",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I5",
    ),
    (
        "DCI_TEST_I6",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I6",
    ),
    (
        "DCI_TEST_I7",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I7",
    ),
    (
        "DCI_TEST_I8",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I8",
    ),
    (
        "DCI_TEST_I9",
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CLB2CTR_DCI_TEST_I9",
    ),
    ("IJTAG_TDI_EXT", "IJTAG_TDO_EXT"),
];

pub const XP5PIO_LPDDRMC_FROM_DIG: &[(&str, &str)] = &[
    ("IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_LOCK", "DCI_LOCK"),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O0",
        "DCI_TEST_O0",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O10",
        "DCI_TEST_O10",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O11",
        "DCI_TEST_O11",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O12",
        "DCI_TEST_O12",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O13",
        "DCI_TEST_O13",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O14",
        "DCI_TEST_O14",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O15",
        "DCI_TEST_O15",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O16",
        "DCI_TEST_O16",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O17",
        "DCI_TEST_O17",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O18",
        "DCI_TEST_O18",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O19",
        "DCI_TEST_O19",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O1",
        "DCI_TEST_O1",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O20",
        "DCI_TEST_O20",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O21",
        "DCI_TEST_O21",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O22",
        "DCI_TEST_O22",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O23",
        "DCI_TEST_O23",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O2",
        "DCI_TEST_O2",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O3",
        "DCI_TEST_O3",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O4",
        "DCI_TEST_O4",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O5",
        "DCI_TEST_O5",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O6",
        "DCI_TEST_O6",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O7",
        "DCI_TEST_O7",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O8",
        "DCI_TEST_O8",
    ),
    (
        "IF_XPIO_DCI_FABRIC_DMC_IABUT_CTR2CLB_DCI_TEST_O9",
        "DCI_TEST_O9",
    ),
    (
        "IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_DFX_UNEXPECTED_ACTIVATION11",
        "DFX_UNEXPECTED_ACTIVATION",
    ),
];

pub const XP5IO_RTRIM: &[(&str, &str)] = &[
    ("RTRIM_M2L_IN0", "RTRIM_M2L_OUT0"),
    ("RTRIM_M2L_IN10", "RTRIM_M2L_OUT10"),
    ("RTRIM_M2L_IN11", "RTRIM_M2L_OUT11"),
    ("RTRIM_M2L_IN12", "RTRIM_M2L_OUT12"),
    ("RTRIM_M2L_IN13", "RTRIM_M2L_OUT13"),
    ("RTRIM_M2L_IN14", "RTRIM_M2L_OUT14"),
    ("RTRIM_M2L_IN1", "RTRIM_M2L_OUT1"),
    ("RTRIM_M2L_IN2", "RTRIM_M2L_OUT2"),
    ("RTRIM_M2L_IN3", "RTRIM_M2L_OUT3"),
    ("RTRIM_M2L_IN4", "RTRIM_M2L_OUT4"),
    ("RTRIM_M2L_IN5", "RTRIM_M2L_OUT5"),
    ("RTRIM_M2L_IN6", "RTRIM_M2L_OUT6"),
    ("RTRIM_M2L_IN7", "RTRIM_M2L_OUT7"),
    ("RTRIM_M2L_IN8", "RTRIM_M2L_OUT8"),
    ("RTRIM_M2L_IN9", "RTRIM_M2L_OUT9"),
];

pub const XP5IO_JTAG: &[(&str, &str, &str, &str)] = &[
    // LPDDRMC out, CMU_DIG in, XPHY_LS out, XPHY_LS in
    (
        "SHIFT_DR_OABUT",
        "IJTAG_SHIFT_DR",
        "IJTAG_SHIFT_DR_OUT",
        "IJTAG_SHIFT_DR_IN",
    ),
    (
        "CLOCK_DR_OABUT",
        "IJTAG_CLOCK_DR",
        "IJTAG_CLOCK_DR_OUT",
        "IJTAG_CLOCK_DR_IN",
    ),
    (
        "CAPTURE_DR_OABUT",
        "CAPTURE_DR",
        "IJTAG_CAPTURE_DR_OUT",
        "IJTAG_CAPTURE_DR_IN",
    ),
    (
        "SELECT_DR_OABUT",
        "SELECT_DR",
        "IJTAG_SELECT_DR_OUT",
        "IJTAG_SELECT_DR_IN",
    ),
    (
        "UPDATE_DR_OABUT",
        "IJTAG_UPDATE_DR",
        "IJTAG_UPDATE_DR_OUT",
        "IJTAG_UPDATE_DR_IN",
    ),
    (
        "RESET_TAP_OABUT",
        "IJTAG_RESET_TAP_B",
        "IJTAG_RESET_TAP_B_OUT",
        "IJTAG_RESET_TAP_B_IN",
    ),
];

pub fn verify_xp5pio_cmu_ana(vrf: &mut Verifier, bel: &BelContext<'_>) {
    let mut pins = vec![
        ("GTS_CFG_B_IN", SitePinDir::In),
        ("GHIGH_B_IN", SitePinDir::In),
    ];
    for &(pin, _) in XP5PIO_ANA_FROM_DIG {
        pins.push((pin, SitePinDir::In));
    }
    for &(_, pin) in XP5PIO_DIG_FROM_ANA {
        pins.push((pin, SitePinDir::Out));
    }
    vrf.verify_bel(bel, "XP5PIO_CMU_ANA", &pins, &[]);
    for (pin, _) in pins {
        vrf.claim_net(&[bel.fwire(pin)]);
    }
    let obel = vrf.find_bel_sibling(bel, bels::XP5PIO_CMU_DIG_TOP);
    for (pin, opin) in XP5PIO_ANA_FROM_DIG {
        vrf.claim_pip(bel.crd(), bel.wire(pin), obel.wire(opin));
    }
}

pub fn verify_xp5pio_cmu_dig(vrf: &mut Verifier, bel: &BelContext<'_>) {
    let mut junk_out = vec![];
    for i in 0..17 {
        junk_out.push(format!("CMU2XCV_DCI_ZBUS{i}"));
    }
    for i in 0..69 {
        junk_out.push(format!("XMC_CFG2ANA_REG{i}"));
    }
    let mut junk_in = vec![];
    for i in 0..16 {
        junk_in.push(format!("DCI_COMP_SCAN_OUT{i}"));
    }

    let mut pins = vec![
        ("IJTAG_TDI_RETURN_EXT", SitePinDir::In),
        ("IJTAG_TDO_RETURN_EXT", SitePinDir::Out),
        ("IJTAG_TDO_EXT", SitePinDir::Out),
        ("IMPCAL_RTUNE0", SitePinDir::Out),
        ("MASTER_EN_PIN", SitePinDir::In),
    ];
    for pin in &junk_out {
        pins.push((pin.as_str(), SitePinDir::Out));
    }
    for pin in &junk_in {
        pins.push((pin.as_str(), SitePinDir::In));
    }
    for &(opin, pin) in XP5PIO_ANA_FROM_DIG {
        if opin == "IMPCALANA_REF_ENABLE" {
            continue;
        }
        pins.push((pin, SitePinDir::Out));
    }
    for &(_, pin) in XP5PIO_LPDDRMC_FROM_DIG {
        pins.push((pin, SitePinDir::Out));
    }
    for &(ipin, opin) in XP5IO_RTRIM {
        pins.push((ipin, SitePinDir::In));
        pins.push((opin, SitePinDir::Out));
    }

    for &(pin, _) in XP5PIO_DIG_FROM_ANA {
        pins.push((pin, SitePinDir::In));
    }
    for &(pin, _) in XP5PIO_DIG_FROM_LPDDRMC {
        pins.push((pin, SitePinDir::In));
    }
    for &(_, pin, _, _) in XP5IO_JTAG {
        pins.push((pin, SitePinDir::In));
    }
    vrf.verify_bel(bel, "XP5PIO_CMU_DIG_TOP", &pins, &[]);
    for (pin, _) in pins {
        vrf.claim_net(&[bel.fwire(pin)]);
    }
    let obel = vrf.find_bel_sibling(bel, bels::XP5PIO_CMU_ANA);
    for (pin, opin) in XP5PIO_DIG_FROM_ANA {
        vrf.claim_pip(bel.crd(), bel.wire(pin), obel.wire(opin));
    }
    let obel = vrf.find_bel_sibling(bel, bels::LPDDRMC);
    for (pin, opin) in XP5PIO_DIG_FROM_LPDDRMC {
        vrf.claim_pip(bel.crd(), bel.wire(pin), obel.wire(opin));
    }
    for (opin, pin, _, _) in XP5IO_JTAG {
        vrf.claim_pip(bel.crd(), bel.wire(pin), obel.wire(opin));
    }
    let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[5]);
    for (pin, opin) in XP5IO_RTRIM {
        vrf.claim_pip(bel.crd(), bel.wire(pin), obel.wire(opin));
    }
    let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[10]);
    vrf.claim_pip(
        bel.crd(),
        bel.wire("IJTAG_TDI_RETURN_EXT"),
        obel.wire("PHY2XXX_IJTAG_TDO_RETURN"),
    );
}

pub fn verify_lpddrmc(vrf: &mut Verifier, bel: &BelContext<'_>) {
    let mut alloc_outs = vec![];
    let mut alloc_ins = vec![];
    for i in 0..66 {
        alloc_outs.push(format!("DMC2PHY_T_TXBIT{i}"));
    }
    for i in 0..11 {
        for &pin in X5PHY_LS_FROM_LPDDRMC_CLB2PHY {
            alloc_outs.push(format!("IF_DMC_CLB2PHY_P{i}_{pin}"));
        }
        for &pin in X5PHY_LPDDRMC_FROM_LS_CLB2PHY {
            alloc_ins.push(format!("IF_DMC_CLB2PHY_P{i}_{pin}"));
        }
        for &(pin, prefix) in X5PHY_LS_FROM_LPDDRMC_DMC2PHY {
            alloc_outs.push(format!("IF_DMC2PHY_{prefix}{i}_{pin}"));
        }
        for &(pin, prefix) in X5PHY_LPDDRMC_FROM_LS_DMC2PHY {
            alloc_ins.push(format!("IF_DMC2PHY_{prefix}{i}_{pin}"));
        }
        for pin in X5PHY_LPDDRMC_FROM_LS_DFX {
            alloc_ins.push(format!("IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_{pin}{i}"));
        }
        for pin in X5PHY_LS_FROM_LPDDRMC_DFX {
            alloc_outs.push(format!("IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_{pin}{i}"));
        }
        alloc_ins.push(format!("IF_XPIO_MMCM_DMC_IABUT_XPIO_PHY_CLK{i}"));
        alloc_ins.push(format!("PHY_DIV4_CLK{i}"));
        if !matches!(i, 0 | 9 | 10) {
            alloc_outs.push(format!("IF_XPIO_MMCM_DMC_OABUT_XPIO_PHY_CLK{i}"));
        }
    }

    let mut pins = vec![
        ("PLL0_CLKOUTPHY_OABUT", SitePinDir::Out),
        ("PLL1_CLKOUTPHY_OABUT", SitePinDir::Out),
        ("DMC_XPLL0_RESET", SitePinDir::Out),
        ("DMC_XPLL1_RESET", SitePinDir::Out),
        ("DMC_XPLL0_CLKOUTPHY_EN", SitePinDir::Out),
        ("DMC_XPLL1_CLKOUTPHY_EN", SitePinDir::Out),
        ("PLL0_CLKOUTPHY_IABUT", SitePinDir::In),
        ("PLL1_CLKOUTPHY_IABUT", SitePinDir::In),
        ("XPLL0_DMC_LOCK", SitePinDir::In),
        ("XPLL1_DMC_LOCK", SitePinDir::In),
        ("IF_XPIO_MMCM_DMC_OABUT_XPIO_CCIO0", SitePinDir::Out),
        ("IF_XPIO_MMCM_DMC_OABUT_XPIO_CCIO1", SitePinDir::Out),
        ("IF_XPIO_MMCM_DMC_OABUT_XPIO_CCIO2", SitePinDir::Out),
        ("IF_XPIO_MMCM_DMC_OABUT_XPIO_CCIO3", SitePinDir::Out),
        ("IF_XPIO_MMCM_DMC_IABUT_XPIO_CCIO0", SitePinDir::In),
        ("IF_XPIO_MMCM_DMC_IABUT_XPIO_CCIO1", SitePinDir::In),
        ("IF_XPIO_MMCM_DMC_IABUT_XPIO_CCIO2", SitePinDir::In),
        ("IF_XPIO_MMCM_DMC_IABUT_XPIO_CCIO3", SitePinDir::In),
        (
            "IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_CLB2PHY_SCAN_EDT_UPDT_B",
            SitePinDir::Out,
        ),
        ("IJTAG_TDO_IABUT", SitePinDir::In),
        // ties
        ("IJTAG_SHIFT_DR", SitePinDir::In),
        ("IJTAG_CLOCK_DR", SitePinDir::In),
        ("IJTAG_UPDATE_DR", SitePinDir::In),
        ("BSCAN_GTS_USR_B_IABUT", SitePinDir::In),
        ("BSCAN_CFG2IOB_PUDC_B_IABUT", SitePinDir::In),
        ("BSCAN_EXTEST_IABUT", SitePinDir::In),
        ("BSCAN_EXTEST_SMPL_IABUT", SitePinDir::In),
    ];

    for pin in &alloc_outs {
        pins.push((pin.as_str(), SitePinDir::Out));
    }
    for pin in &alloc_ins {
        pins.push((pin.as_str(), SitePinDir::In));
    }
    for &(_, pin) in XP5PIO_DIG_FROM_LPDDRMC {
        pins.push((pin, SitePinDir::Out));
    }
    for &(pin, _) in XP5PIO_LPDDRMC_FROM_DIG {
        pins.push((pin, SitePinDir::In));
    }
    for &(pin, _, _, _) in XP5IO_JTAG {
        pins.push((pin, SitePinDir::Out));
    }

    vrf.verify_bel(
        bel,
        "LPDDRMC",
        &pins,
        &[
            "CFG2IOB_PUDC_B",
            "CFG2IOB_PUDC_B_O",
            "CAPTURE_DR_O",
            "SELECT_DR_O",
            "IJTAG_RESET_TAP_O",
        ],
    );
    for (pin, _) in pins {
        vrf.claim_net(&[bel.fwire(pin)]);
    }

    let obel = vrf.find_bel_sibling(bel, bels::XP5PIO_CMU_DIG_TOP);
    for (pin, opin) in XP5PIO_LPDDRMC_FROM_DIG {
        vrf.claim_pip(bel.crd(), bel.wire(pin), obel.wire(opin));
    }

    for i in 0..11 {
        let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[i]);
        for &(pin, prefix) in X5PHY_LPDDRMC_FROM_LS_DMC2PHY {
            vrf.claim_pip(
                bel.crd(),
                bel.wire(&format!("IF_DMC2PHY_{prefix}{i}_{pin}")),
                obel.wire(&format!("IF_DMC2PHY_{pin}")),
            );
        }
        for pin in X5PHY_LPDDRMC_FROM_LS_CLB2PHY {
            vrf.claim_pip(
                bel.crd(),
                bel.wire(&format!("IF_DMC_CLB2PHY_P{i}_{pin}")),
                obel.wire(&format!("IF_CLB2PHY_{pin}")),
            );
        }
        for pin in X5PHY_LPDDRMC_FROM_LS_DFX {
            vrf.claim_pip(
                bel.crd(),
                bel.wire(&format!("IF_XPIO_DFX_DFXCNTRL_DMC_IABUT_{pin}{i}")),
                obel.wire(pin),
            );
        }
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("IF_XPIO_MMCM_DMC_IABUT_XPIO_PHY_CLK{i}")),
            obel.wire("PHY2GCLK_FIFO_WRCLK"),
        );
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("PHY_DIV4_CLK{i}")),
            obel.wire("DIV4_CLK"),
        );
    }

    for (pin, oslot, opin) in [
        ("PLL0_CLKOUTPHY_IABUT", bels::PLLXP0, "CLKOUTPHY_P"),
        ("PLL1_CLKOUTPHY_IABUT", bels::PLLXP1, "CLKOUTPHY_P"),
        ("XPLL0_DMC_LOCK", bels::PLLXP0, "LOCKED_DMC"),
        ("XPLL1_DMC_LOCK", bels::PLLXP1, "LOCKED_DMC"),
    ] {
        vrf.claim_pip(bel.crd(), bel.wire(pin), bel.wire_far(pin));
        let obel = vrf.find_bel_sibling(bel, oslot);
        vrf.verify_net(&[bel.fwire_far(pin), obel.fwire(opin)]);
    }

    let obel = vrf.find_bel_sibling(bel, bels::X5PHY_LS[5]);
    vrf.claim_pip(
        bel.crd(),
        bel.wire("IJTAG_TDO_IABUT"),
        obel.wire("PHY2XXX_IJTAG_TDO"),
    );

    let obel_vcc = vrf.find_bel_sibling(bel, bels::VCC_XP5IO);
    for (ccio, nibble) in [4, 5, 10, 6].into_iter().enumerate() {
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("IF_XPIO_MMCM_DMC_IABUT_XPIO_CCIO{ccio}")),
            obel_vcc.wire("VCC"),
        );
        let obel = vrf.find_bel_sibling(bel, bels::XP5IOB[nibble * 3]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("IF_XPIO_MMCM_DMC_IABUT_XPIO_CCIO{ccio}")),
            obel.wire("IOB2PHY_I0"),
        );
        let obel = vrf.find_bel_sibling(bel, bels::XP5IOB[nibble * 3 + 2]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("IF_XPIO_MMCM_DMC_IABUT_XPIO_CCIO{ccio}")),
            obel.wire("IOB2PHY_I0"),
        );
    }
    for nibble in [0, 1, 2, 3, 7, 8, 9] {
        vrf.claim_net(&[bel.fwire(&format!("NIBBLE{nibble}_CCIO_DUMMY"))]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("NIBBLE{nibble}_CCIO_DUMMY")),
            obel_vcc.wire("VCC"),
        );
        let obel = vrf.find_bel_sibling(bel, bels::XP5IOB[nibble * 3]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("NIBBLE{nibble}_CCIO_DUMMY")),
            obel.wire("IOB2PHY_I0"),
        );
        let obel = vrf.find_bel_sibling(bel, bels::XP5IOB[nibble * 3 + 2]);
        vrf.claim_pip(
            bel.crd(),
            bel.wire(&format!("NIBBLE{nibble}_CCIO_DUMMY")),
            obel.wire("IOB2PHY_I0"),
        );
    }
}
